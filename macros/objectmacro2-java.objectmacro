#This file is part of SableCC ( http://sablecc.org ).
#
#See the NOTICE file distributed with this work for copyright information.
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

#========== header ==========
Macro header
{Begin}
/* This file was generated by SableCC's ObjectMacro. */
{End}

#========== package_declaration ==========
Macro package_declaration
  Param
    package_name : String;
{Begin}
package {package_name};
{End}

#========== import_java_util ==========
Macro import_java_util
{Begin}
import java.util.*;
{End}

#========== context ==============
Macro context
  Param
    list_package : package_declaration, before_first="\n";
{Begin}
{Insert: header}
{list_package}

public class Context {

}
{End}

#========== internals_initializer =========
Macro internals_initializer
  Param
    list_package : package_declaration, before_first="\n";
    list_parent_internal_setters : parent_internals_setter, separator="\n";
{Begin}
{Insert: header}
{list_package}
{Insert: import_java_util}

public class InternalsInitializer {

    private final String _paramName;

    InternalsInitializer(String paramName){
        this._paramName = paramName;
    }

{list_parent_internal_setters}

}
{End}

#========== parent_internals_setter =========
Macro parent_internals_setter
  Param
    name : String;
{Begin}
  void set{name}(M{name} m{name}){
      throw ObjectMacroException.incorrectType("M{name}", this._paramName);
  }
{End}

#========== super_macro ==========
Macro super_macro
  Param
    list_package : package_declaration, before_first="\n";
{Begin}
{Insert: header}
{list_package}
{Insert: import_java_util}

public abstract class Macro {

    public final static String LINE_SEPARATOR = System.getProperty("line.separator");

    public String expansion;

    public Map<Context, String> expansions = new LinkedHashMap<>();

    public String build(){

        throw new RuntimeException("build cannot be invoked here");
    }

    String build(
            Context context){

        throw new RuntimeException("build cannot be invoked here");
    }

    void apply(
            InternalsInitializer internalsInitializer){

        throw new RuntimeException("apply cannot be called here");
    }

}
{End}

#========== macro ==========
Macro macro
  Param
    name : String;
    list_package : package_declaration;
    list_field : param_macro_field, param_string_field, internal_macro_field, internal_string_field, separator="\n", before_first="\n";
    list_context_field : context_field, before_first="\n";
    list_constructor : constructor, before_first="\n";
    list_setter : param_string_setter, param_macro_setter, internal_string_setter, internal_macro_setter, separator="\n", before_first="\n";
    list_builder : param_string_ref_builder, param_macro_ref_builder, separator="\n", before_first="\n";
    list_ref : param_string_ref, param_macro_ref, separator="\n", before_first="\n";
    list_redefined_apply_initializer : redefined_apply_initializer;
    list_macro_builder : macro_builder, before_first="\n";
    list_empty_builder_with_context : empty_builder_with_context, before_first="\n";
{Begin}
{Insert: header}
{list_package}

{Insert: import_java_util}

public class M{name} extends Macro{
{list_field}
{list_context_field}
{list_constructor}
{list_setter}
{list_builder}
{list_ref}

{list_redefined_apply_initializer}
{list_macro_builder}
{list_empty_builder_with_context}
}
{End}

#========== macro_builder =======
Macro macro_builder
  Param
    list_public : public;
    list_context_param : context_param;
    list_context_expansion : context_expansion, none="this.expansion";
    list_part : string_part, param_insert_part,  eol_part, insert_macro_part, separator="\n";
    list_new_context_expansion : new_context_expansion, none="this.expansion = local_expansion";
{Begin}
    @Override
    {list_public} String build({list_context_param}){

        String local_expansion = {list_context_expansion};

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

{list_part}

        local_expansion = sb0.toString();
        {list_new_context_expansion};
        return local_expansion;
}
{End}

#============ empty_builder_with_context ============
Macro empty_builder_with_context
{Begin}
    @Override
    String build(Context context) {
        return build();
    }
{End}

#========= public =============
Macro public
{Begin}
public
{End}

#========== context_expansion =======
Macro context_expansion
{Begin}
this.expansions.get(context)
{End}

#========== new_context_expansion =========
Macro new_context_expansion
{Begin}
this.expansions.put(context, local_expansion)
{End}

#========= redefined_apply_initializer =======
Macro redefined_apply_initializer
  Param
    name : String;
{Begin}
    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.set{name}(this);
    }
{End}

#========== param_macro_field ==========
Macro param_macro_field
  Param
    name : String;
{Begin}
    private Macro list_{name}[];
{End}

#========== param_string_field ==========
Macro param_string_field
  Param
    name : String;
{Begin}
    private String field_{name};
{End}

#========== internal_macro_field ==========
Macro internal_macro_field
  Param
    name : String;
{Begin}
    private Map<Context, Macro[]> list_{name} = new LinkedHashMap<>();
{End}

#========== internal_string_field ==========
Macro internal_string_field
  Param
    name : String;
{Begin}
    private Map<Context, String> field_{name} = new LinkedHashMap<>();
{End}

#========== context_field =========
Macro context_field
  Param
    name : String;
{Begin}
    private final Context {name}Context = new Context();
{End}

#========== constructor ==========
Macro constructor
  Param
    name : String;
    list_set_param : set_param, before_first="\n";
    list_param : string_param, macro_param, separator=", ";
    list_internal : init_macro_internal,  init_string_internal, before_first="\n";
{Begin}
    public M{name}({list_param}){
{list_set_param}
{list_internal}
    }
{End}

#========== string_param ==========
Macro string_param
  Param
    name : String;
{Begin}
String p{name}
{End}

#========== macro_param ==========
Macro macro_param
  Param
    name : String;
{Begin}
Macro p{name}[]
{End}

#=========== param_string_setter =========
Macro param_string_setter
  Param
    name : String;
    list_string_param : string_param;
    list_param_arg : param_arg;
{Begin}
    private void setP{name}( {list_string_param} ){
        if({list_param_arg} == null){
            throw ObjectMacroException.parameterNull("{name}");
        }

        this.field_{name} = {list_param_arg};
    }
{End}

#========= param_macro_setter ===========
Macro param_macro_setter
  Param
    name : String;
    list_macro_param : macro_param;
    list_param_arg : param_arg;
    list_apply_internals_initializer : apply_internals_initializer;
{Begin}
    private void setP{name}({list_macro_param}){
        if({list_param_arg} == null){
            throw ObjectMacroException.parameterNull("{name}");
        }

        Macro macros[] = {list_param_arg};
        this.list_{name} = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "$name");
            }

            {list_apply_internals_initializer}

            this.list_{name}[i++] = macro;

        }
    }
{End}

#========= internal_macro_setter =========
Macro internal_macro_setter
  Param
    name : String;
    list_apply_internals_initializer : apply_internals_initializer;
{Begin}
    void set{name}(
            Context context,
            Macro macros[]) {

        if(macros == null){
            throw new RuntimeException("macros cannot be null here");
        }

        Macro[] tempMacros = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){

            if(macro == null){
                throw ObjectMacroException.macroNull(i, "{name}");
            }

            {list_apply_internals_initializer}

            tempMacros[i++] = macro;
        }

        this.list_{name}.put(context, tempMacros);
    }
{End}

#========== apply_internals_initializer =======
Macro apply_internals_initializer
  Param
    param_name : String;
    list_redefined_internals_setter : redefined_internals_setter;
{Begin}
macro.apply(new InternalsInitializer("{param_name}"){
{list_redefined_internals_setter}
});
{End}

#========== redefined_internals_setter =========
Macro redefined_internals_setter
  Param
    name : String;
    list_part : init_string_builder, string_part, param_insert_part, eol_part, insert_macro_part, separator="\n";
    list_set_internal : set_internal;
{Begin}
@Override
void set{name}(M{name} m{name}){

    {list_part}
    {list_set_internal}
}
{End}

#========== string_value ========
Macro string_value
  Param
    string : String;
{Begin}
"{string}"
{End}

#=========== macro_arg ==========
Macro macro_arg
  Param
    name : String;
{Begin}
list_{name}
{End}

#=========== string_arg =========
Macro string_arg
  Param
    name : String;
{Begin}
field_{name}
{End}

#========== set_param ==========
Macro set_param
  Param
    name : String;
    list_param_arg : param_arg;
{Begin}
        this.setP{name}({list_param_arg});
{End}

#========== param_arg ==========
Macro param_arg
  Param
    name : String;
{Begin}
p{name}
{End}

#========= string_part =================
Macro string_part
  Param
    string : String;
    index_builder : String;
{Begin}
        sb{index_builder}.append("{string}");
{End}

#========= eol_part ===================
Macro eol_part
  Param
    index_builder : String;
{Begin}
        sb{index_builder}.append(LINE_SEPARATOR);
{End}

#========== param_insert_part ==========
Macro param_insert_part
  Param
    param_name : String;
    index_builder : String;
    list_context_arg : context_arg;
{Begin}
        sb{index_builder}.append(build{param_name}({list_context_arg}));
{End}

#========= init_string_builder =========
Macro init_string_builder
  Param
    index_builder : String;
{Begin}
        StringBuilder sb{index_builder} = new StringBuilder();
{End}

#========== insert_macro_part ===============
Macro insert_macro_part
  Param
    name : String;
    index_builder : String;
    index_insert : String;
    list_part : init_string_builder, string_part, param_insert_part, eol_part, insert_macro_part;
    list_set_internal : set_internal;
{Begin}
        M{name} minsert_{index_insert} = new M{name}();
        {list_part}
        {list_set_internal}
        sb{index_builder}.append(minsert_{index_insert}.build(null));
{End}

#========== set_internal ==================
Macro set_internal
  Param
    macro_name : String;
    param_name : String;
    context : String;
    list_param : param_ref, string_builder_build;
{Begin}
        m{macro_name}.set{param_name}({context}, {list_param});
{End}

#========== string_builder_build ==========
Macro string_builder_build
  Param
    index_builder : String;
{Begin}
sb{index_builder}.toString()
{End}

#========== param_macro_ref_builder ==================
Macro param_macro_ref_builder
  Param
    name : String;
    index_builder : String;
    list_context_param : context_param;
    list_context_name : context_name;
    list_get_internal_tail : get_internal_tail;
    list_none : none;
    list_before_first : before_first;
    list_separator : separator;
    list_after_last : after_last;
{Begin}
    private String build{name}({list_context_param}){

        StringBuilder sb{index_builder} = new StringBuilder();
        Context local_context = {list_context_name};
        Macro macros[] = this.list_{name} {list_get_internal_tail};
        {list_none}
        boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            {list_before_first}
            {list_separator}

            sb{index_builder}.append(macro.build(local_context));
            i++;

            {list_after_last}
        }

        return sb{index_builder}.toString();
    }
{End}

#=========== param_string_ref_builder =============
Macro param_string_ref_builder
  Param
    name : String;
    list_context_param : context_param;
    list_get_internal_tail : get_internal_tail;
{Begin}
    private String build{name}({list_context_param}){

        return this.field_{name}{list_get_internal_tail};
    }
{End}

#========== param_macro_ref ==============
Macro param_macro_ref
  Param
    name : String;
    list_context_param : context_param;
    list_get_internal_tail : get_internal_tail;
{Begin}
    private Macro[] get{name}({list_context_param}){

        return this.list_{name}{list_get_internal_tail};
    }
{End}


#========== param_string_ref ==============
Macro param_string_ref
  Param
    name : String;
    list_context_param : context_param;
    list_get_internal_tail : get_internal_tail;
{Begin}
    private String get{name}({list_context_param}){

        return this.field_{name}{list_get_internal_tail};
    }
{End}

#=========== param_ref ===========
Macro param_ref
  Param
    name : String;
    list_context_arg : context_arg, context_name;
{Begin}
get{name}({list_context_arg})
{End}

#=========== context_name =============
Macro context_name
  Param
    list_context_name : String;
{Begin}
{list_context_name}
{End}

#=========== none ============
Macro none
  Param
    list_part : string_part, param_insert_part, eol_part, insert_macro_part;
{Begin}
if(macros.length == 0){
    {list_part}
}
{End}

#========== before_first =========
Macro before_first
  Param
    list_part : string_part, param_insert_part, eol_part, insert_macro_part;
{Begin}
if(first){
    {list_part}
    first = false;
}
{End}

#========== after_last ==========
Macro after_last
  Param
    list_part : string_part, param_insert_part, eol_part, insert_macro_part;
{Begin}
if(i == macros.length){
    {list_part}
}
{End}

#======== separator ===========
Macro separator
  Param
    list_part : string_part, param_insert_part, eol_part, insert_macro_part;
{Begin}
if(first) {
  first = false;
}
else {
   {list_part}
}
{End}

#=========== get_internal_tail ============
Macro get_internal_tail
{Begin}
.get(context)
{End}

#========== context_verifier ============
Macro context_verifier
{Begin}
        if(context == null){
            throw new RuntimeException("context cannot be null here");
        }
{End}

#======== context_param ============
Macro context_param
{Begin}
Context context
{End}

#========= context_arg ============
Macro context_arg
{Begin}
context
{End}

#========= internal_string_setter =========
Macro internal_string_setter
  Param
    name : String;
{Begin}
    void set{name}(
            Context context,
            String value) {

        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }

        this.field_{name}.put(context, value);
    }
{End}

#========== init_macro_internal ===========
Macro init_macro_internal
  Param
    name : String;
{Begin}
    this.list_{name} = new LinkedHashMap<>();
{End}

#========== init_string_internal ===========
Macro init_string_internal
  Param
    name : String;
{Begin}
    this.field_{name} = new LinkedHashMap<>();
{End}

#=========================================================
#=====================  EXCEPTIONS =======================
#=========================================================

#============ object_macro_exception ===========
Macro ex_object_macro_exception
  Param
    list_package_declaration :package_declaration,  before_first="\n";
{Begin}
{Insert: header}
{list_package_declaration}

public class ObjectMacroException
        extends RuntimeException{

    private ObjectMacroException(
            String message){

        super(message);

        if(message == null){
            throw new RuntimeException("message may not be null");
        }
    }

    private ObjectMacroException(
            String message,
            Throwable cause) {

        super(message, cause);

        if (message == null) {
            throw new RuntimeException("message may not be null");
        }

        if (cause == null) {
            throw new RuntimeException("cause may not be null");
        }
    }

    static ObjectMacroException incorrectType(
            String type,
            String param_name){


        return new ObjectMacroException(
                new MIncorrectType(type, param_name).toString());
    }

    static ObjectMacroException macroNull(
            Integer index,
            String paramName){

        return new ObjectMacroException(
                new MMacroNullInList(String.valueOf(index), paramName).toString());
    }

    static ObjectMacroException parameterNull(
            String paramName){

        return new ObjectMacroException(new MParameterNull(paramName).toString());
    }

}
{End}

#============ incorrect_type ===========
Macro ex_incorrect_type
  Param
    list_package_declaration : package_declaration, before_first="\n";
{Begin}
{Insert : header}
{list_package_declaration}


public class MIncorrectType {

  private final String pType;
  private final String pParamName;
  private final MIncorrectType mIncorrectType = this;

  public MIncorrectType(String pType, String pParamName) {
    if(pType == null) throw new NullPointerException();
    this.pType = pType;
    if(pParamName == null) throw new NullPointerException();
    this.pParamName = pParamName;
  }

  String pType() {
    return this.pType;
  }

  String pParamName() {
    return this.pParamName;
  }

  private String rType() {
    return this.mIncorrectType.pType();
  }

  private String rParamName() {
    return this.mIncorrectType.pParamName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(new MObjectMacroErrorHead().toString());
    sb.append(System.getProperty("line.separator"));
    sb.append(rType());
    sb.append(" was not expected in parameter '");
    sb.append(rParamName());
    sb.append("'.");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
{End}

#============== object_macro_error_head ===========
Macro ex_object_macro_error_head
  Param
    list_package_declaration : package_declaration, before_first="\n";
{Begin}
{Insert: header}
{list_package_declaration}

public class MObjectMacroErrorHead {

  public MObjectMacroErrorHead() {
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("*** OBJECT MACRO ERROR ***");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
{End}

#=============== parameter_null ==============
Macro ex_parameter_null
  Param
    list_package_declaration : package_declaration, before_first="\n";
{Begin}
{Insert: header}
{list_package_declaration}

public class MParameterNull {

  private final String pParamName;
  private final MParameterNull mParameterNull = this;

  public MParameterNull(String pParamName) {
    if(pParamName == null) throw new NullPointerException();
    this.pParamName = pParamName;
  }

  String pParamName() {
    return this.pParamName;
  }

  private String rParamName() {
    return this.mParameterNull.pParamName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("Parameter '");
    sb.append(rParamName());
    sb.append("' cannot be null.");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}

{End}

#============ macro_null_in_list ============
Macro ex_macro_null_in_list
  Param
    list_package_declaration : package_declaration, before_first="\n";
{Begin}
{Insert: header}
{list_package_declaration}

public class MMacroNullInList {

  private final String pIndex;
  private final String pParamName;
  private final MMacroNullInList mMacroNullInList = this;

  public MMacroNullInList(String pIndex, String pParamName) {
    if(pIndex == null) throw new NullPointerException();
    this.pIndex = pIndex;
    if(pParamName == null) throw new NullPointerException();
    this.pParamName = pParamName;
  }

  String pIndex() {
    return this.pIndex;
  }

  String pParamName() {
    return this.pParamName;
  }

  private String rIndex() {
    return this.mMacroNullInList.pIndex();
  }

  private String rParamName() {
    return this.mMacroNullInList.pParamName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("A macro is null at index ");
    sb.append(rIndex());
    sb.append(" in the list '");
    sb.append(rParamName());
    sb.append("'.");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
{End}
