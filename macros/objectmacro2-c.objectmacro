#This file is part of SableCC ( http://sablecc.org ).
#
#See the NOTICE file distributed with this work for copyright information.
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

#============================
#========== Utils  ==========
#============================

#========== header ==========
Macro header
{Body}
/* This file was generated by SableCC's ObjectMacro. */
{End}

#========== include ==========
Macro include
    Param
        include_name : String;
{Body}
include "{include_name}.h"
{End}

#========== linked_list_node_h ==========
Macro linked_list_node_h
{Body}
{Insert: header}

{#ifndef LINKEDLISTNODE_H
{#define LINKEDLISTNODE_H

typedef struct Node
{
    void *data;
    struct Node *next;
} Node;

{#endif //LINKEDLISTNODE_H
{End}

#========== linked_list_h ==========
Macro linked_list_h
{Body}
{Insert: header}

{#ifndef LINKEDLIST_H
{#define LINKEDLIST_H

extern struct LinkedListVT VT_LinkedList;
extern void *HT_LinkedList[];

typedef struct LinkedList
{
    struct LinkedListVT (*vt)
    struct Node *nodes;
} LinkedList;

typedef struct LinkedListVT
{
    int hl;
    void* (*ht)[];
    void (*push)(struct LinkedList*, void *new_data, size_t data_size);
} LinkedListVT;

LinkedList* new_LinkedList();
void free_LinkedList(struct LinkedList*);

void LinkedList_push(struct LinkedList*, void *new_data, size_t data_size);

{#endif //LINKEDLIST_H
{End}

#========== linked_list_c ==========
Macro linked_list_c
{Body}
{Insert: header}

{#include<stdlib.h>
{#include<stdio.h>

{#include "LinkedListNode.h"
{#include "LinkedList.h"

struct LinkedListVT VT_LinkedList={0, &HT_LinkedList, &LinkedList_push};
void* HT_LinkedList[] = {&VT_LinkedList};

LinkedList* new_LinkedList()
{
    LinkedList* linkedList = malloc(sizeof(LinkedList));
    linkedList->vt = &VT_LinkedList;
    linkedList->nodes = NULL;
}

void free_LinkedList(LinkedList* This)
{
    //TODO
}

void LinkedList_push(LinkedList* This, void *new_data, size_t data_size)
{
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = malloc(data_size);

    if(This->nodes != NULL)
    {
        new_node->next = This->nodes;
    }

    // Copy contents of new_data to newly allocated memory.
    // Assumption: char takes 1 byte
    int i;
    for (i=0; i<data_size; i++)
    {
        *(char *)(new_node->data + i) = *(char *)(new_data + i);
    }

    This->nodes = new_node;
}
{End}

#============================
#========== Basics   ========
#============================

#========== super_macro_h ==========
Macro super_macro_h
{Body}
{Insert: header}

{#ifndef MACRO_H
{#define MACRO_H

extern struct Macro_VT VT_Macro;
extern void *HT_Macro[];
extern char* LINE_SEPARATOR = "";

typedef struct Macro
{
    struct Macro_VT (*vt);
};

typedef struct Macro_VT
{
    int hl;
    void* (*ht)[];
    char* (*build)(struct Macro*);
    void (*apply)(struct Macro*);
};

Macro* new_Macro();
void free_Macro(Macro*);

char* Macro_build(struct Macro*);
void Macro_apply(struct Macro*);

{#endif //MACRO_H
{End}

#========== super_macro_c ==========
Macro super_macro_c
{Body}
{Insert: header}

{#include<stdlib.h>
{#include<stdio.h>

{#include "Macro.h"

struct Macro_VT VT_Macro = {0, &HT_Macro, &Macro_build, &Macro_apply};
void* HT_Macro[] = {&VT_Macro};

Macro* new_Macro()
{
    Macro* macro = malloc(sizeof(Macro));
    macro->vt = &VT_Macro;
    return macro;
}

void free_macro(Macro* This)
{
    free_Macro(This);
}

char* Macro_build(Macro* This)
{
    exit(1);
}

void Macro_apply(Macro* This)
{
    exit(1);
}
{End}

#========== macro_h ==========
Macro macro_h
    Param
        macro_name : String;
        fields : field_string_declaration, separator="\n";
        methods : getter_string_vt_h(macro_name), separator="\n";
        functions : getter_string_h(macro_name), separator="\n";
{Body}
{#ifndef MACRO_H
{#define MACRO_H

extern struct Macro_VT VT_Macro;
extern void *HT_Macro;

typedef struct Macro
{
    struct Macro_VT (*vt);
{Indent: "\t"}
{fields}
{End}
} Macro;

typedef struct Macro_VT
{
    int hl;
    void* (*ht)[];
{Indent: "\t"}
{methods}
{End}
}

{macro_name}* new_{macro_name}();
void free_{macro_name}(struct {macro_name}*);

{functions}

{#endif MACRO_H
{End}

#============================
#========== Fields    =======
#============================

#========== field_string_declaration ==========
Macro field_string_declaration
    Param
        field_name : String;
{Body}
char* {field_name};
{End}

#========== field_string_initializer ==========
Macro field_string_initializer
    Param
        field_name : String;
    Internal
        class_name : String;
{Body}
{class_name}->{field_name};
{End}

#============================
#========== Getter =======
#============================

#========== getter_string_vt_h ==========
Macro getter_string_vt_h
    Param
        field_name : String;
    Internal
        class_name : String;
{Body}
char* (*get{field_name})(struct {class_name}*);
{End}

#========== getter_string_h ==========
Macro getter_string_h
    Param
        field_name : String;
    Internal
        class_name : String;
{Body}
char* {class_name}_get{field_name}(struct {class_name}*);
{End}

#========== getter_string_c ==========
Macro getter_string_c
    Param
        field_name : String;
    Internal
        class_name : String;
{Body}
char* {class_name}_get{field_name}(struct {class_name} *This)
{
    return This->{field_name};
}
{End}

