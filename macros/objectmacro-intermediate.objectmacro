$comment$
This file is part of SableCC ( http://sablecc.org ).

See the NOTICE file distributed with this work for copyright information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
$end$

$comment: ========= intermediate_representation ============== $

$macro: intermediate_representation $
$expand: macro $
$end: intermediate_representation $

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
$comment: ========= macro ============== $

$macro: macro $
Macro {
  Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
$expand: param $
$expand: internal $
$expand: initialization_order $
=======
$macro: macro(name) $
=======
=======
$comment: ========= macro ============== $

>>>>>>> Add initialization order to params depending on the relations between params
$macro: macro $
>>>>>>> FrontEnd is now independent about name conventions
Macro {
  Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
$expand: param $
<<<<<<< HEAD
$expand: context $
>>>>>>> Updated intermediate representation macro
=======
$expand: internal $
<<<<<<< HEAD
>>>>>>> Rename Context by Internal
=======
$expand: initialization_order $
>>>>>>> Add initialization order to params depending on the relations between params
=======
$comment: ========= macro ============== $

$macro: macro $
Macro {
  Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
$expand: param $
$expand: internal $
$expand: initialization_order $
>>>>>>> object-macro2.1
  MacroBody{
$expand: string_part, eol_part, param_insert, macro_insert$
  }
}
$end: macro $

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Add initialization order to params depending on the relations between params
=======
>>>>>>> object-macro2.1
$comment: ========= param ============== $

$macro: param $
 Param {
    Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
<<<<<<< HEAD
=======
$macro: param(name) $
 Param {
    Name = '$name'
>>>>>>> Updated intermediate representation macro
=======
$macro: param $
 Param {
    Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
>>>>>>> FrontEnd is now independent about name conventions
=======
>>>>>>> object-macro2.1
$expand: string_type, macro_type$
$expand: directive, separator=", "$
 }
$end: param $

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> object-macro2.1
$comment: ========= internal ============== $

$macro: internal $
 Internal {
 Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
$expand: string_type, macro_type$
$expand: directive, separator=", "$
 }
$end: internal $

$comment: ========= string_type ============== $
<<<<<<< HEAD
=======
$macro: context(name) $
 Context {
=======
$macro: internal(name) $
 Internal {
>>>>>>> Rename Context by Internal
 Name = '$name'
=======
=======
$comment: ========= internal ============== $

>>>>>>> Add initialization order to params depending on the relations between params
$macro: internal $
 Internal {
 Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
>>>>>>> FrontEnd is now independent about name conventions
$expand: string_type, macro_type$
$expand: directive, separator=", "$
 }
<<<<<<< HEAD
$end: context $
>>>>>>> Updated intermediate representation macro
=======
$end: internal $
>>>>>>> Rename Context by Internal

$comment: ========= string_type ============== $

=======

>>>>>>> object-macro2.1
$macro: string_type$
 Type = String $expand: directive, separator=", ", before_one=", "$
$end: string_type $

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
$comment: ========= macro_type ============== $

=======
>>>>>>> Updated intermediate representation macro
=======
$comment: ========= macro_type ============== $

>>>>>>> Add initialization order to params depending on the relations between params
=======
$comment: ========= macro_type ============== $

>>>>>>> object-macro2.1
$macro: macro_type$
 Type {
$expand: macro_ref $
$expand: directive, separator=", "$
 }
$end: macro_type $

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Add initialization order to params depending on the relations between params
=======
>>>>>>> object-macro2.1
$comment: ========= macro_ref ============== $

$macro: macro_ref$
 MacroRef {
 Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
<<<<<<< HEAD
=======
$macro: macro_ref(name)$
 MacroRef {
 Name = '$name'
>>>>>>> Updated intermediate representation macro
=======
$macro: macro_ref$
 MacroRef {
 Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
>>>>>>> FrontEnd is now independent about name conventions
=======
>>>>>>> object-macro2.1
$expand: args$
 }
$end: macro_ref $

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
$comment: ========= args ============== $

=======
>>>>>>> Updated intermediate representation macro
=======
$comment: ========= args ============== $

>>>>>>> Add initialization order to params depending on the relations between params
=======
$comment: ========= args ============== $

>>>>>>> object-macro2.1
$macro: args$
 Args {
$expand: var_argument, text_argument, separator=", "$
 }
$end: args$

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> object-macro2.1
$comment: ========= var_argument ============== $

$macro: var_argument $
 Var {
    $expand: param_name $
    Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
 }
$end: var_argument $

$comment: ========= text_argument ============== $

$macro: text_argument $
 Value {
    $expand: param_name $
$expand: string_part, eol_part, param_insert, macro_insert$
 }
$end: text_argument $

$comment: ========== param_name ============== $

$macro: param_name(param_name) $
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    ParamName { Name = '$param_name' }
$end: param_name $

$comment: ========= string_part ============== $
=======
$macro: var_argument (name)$
 Var = '$name'
=======
=======
$comment: ========= var_argument ============== $

>>>>>>> Add initialization order to params depending on the relations between params
$macro: var_argument $
<<<<<<< HEAD
 Var = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
>>>>>>> FrontEnd is now independent about name conventions
=======
 Var {
    Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
 }
>>>>>>> Fix simple names to macro refs and var refs
$end: var_argument $

$comment: ========= text_argument ============== $

$macro: text_argument $
 Value {
$expand: string_part, eol_part, param_insert, macro_insert$
 }
<<<<<<< HEAD
$end: text_argument$
>>>>>>> Updated intermediate representation macro
=======
$end: text_argument $
>>>>>>> FrontEnd is now independent about name conventions

=======
    ParamName { '$param_name' }
=======
    ParamName { Name = '$param_name' }
>>>>>>> Fix macro intermediate representation
$end: param_name $

>>>>>>> Add internals name in intermediate representation in args
=======
    ParamName { Name = '$param_name' }
$end: param_name $

>>>>>>> object-macro2.1
$comment: ========= string_part ============== $

$macro: string_part(string) $
  '$string';
$end: string_part $

$comment: ========= eol_part ============== $

$macro: eol_part $
  eol;
$end: eol_part $

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
$comment: ========= macro_insert ============== $

=======
>>>>>>> Updated intermediate representation macro
=======
$comment: ========= macro_insert ============== $

>>>>>>> Add initialization order to params depending on the relations between params
$macro: macro_insert$
 MacroInsert {
$expand: macro_ref $
 };
$end: macro_insert $

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
$comment: ========= param_insert ============== $

$macro: param_insert $
 ParamInsert { Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $ } ;
$end: param_insert $

=======
$comment: ========= macro_insert ============== $

$macro: macro_insert$
 MacroInsert {
$expand: macro_ref $
 };
$end: macro_insert $

$comment: ========= param_insert ============== $

$macro: param_insert $
 ParamInsert { Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $ } ;
$end: param_insert $

>>>>>>> object-macro2.1
$comment: ========= directive ============== $

$macro: directive $
 Directive {
     Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
     $expand: string_part, eol_part, param_insert, macro_insert$
 }
$end: directive $
<<<<<<< HEAD

$comment: ========= simple_name ============== $

$macro: simple_name(name) $
'$name'$no_eol$
$end: simple_name $

$comment: ========= initialization_order ========== $

$macro: initialization_order$
    Initialization Order{
        $expand: simple_name $
    }
$end: initialization_order $
=======
$macro: param_insert(name) $
 ParamInsert = '$name';
=======
=======
$comment: ========= param_insert ============== $

>>>>>>> Add initialization order to params depending on the relations between params
$macro: param_insert $
 ParamInsert { Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $ } ;
>>>>>>> FrontEnd is now independent about name conventions
$end: param_insert $

$comment: ========= directive ============== $

$macro: directive $
 Directive {
     Name = $expand: simple_name, separator=", ", before_many="{ ", after_many=" }" $
     $expand: string_part, eol_part, param_insert, macro_insert$
 }
$end: directive $

<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Updated intermediate representation macro
=======
$macro: simple_name(name) $
'$name'$no_eol$
$end: simple_name $
>>>>>>> FrontEnd is now independent about name conventions
=======
$comment: ========= simple_name ============== $

=======

$comment: ========= simple_name ============== $

>>>>>>> object-macro2.1
$macro: simple_name(name) $
'$name'$no_eol$
$end: simple_name $

$comment: ========= initialization_order ========== $

$macro: initialization_order$
    Initialization Order{
        $expand: simple_name $
    }
$end: initialization_order $
<<<<<<< HEAD
>>>>>>> Add initialization order to params depending on the relations between params
=======
>>>>>>> object-macro2.1
