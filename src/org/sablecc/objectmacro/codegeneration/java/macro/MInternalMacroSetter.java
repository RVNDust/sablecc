/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
public class MInternalMacroSetter {

  private final String pParamName;
  private final MInternalMacroSetter mInternalMacroSetter = this;

  public MInternalMacroSetter(String pParamName) {
    if(pParamName == null) throw new NullPointerException();
    this.pParamName = pParamName;
  }

  String pParamName() {
    return this.pParamName;
  }

  private String rParamName() {
    return this.mInternalMacroSetter.pParamName();
=======
import java.util.*;

=======
>>>>>>> Add structure which contains list of macros and the context associated
public class MInternalMacroSetter {

  private final String pParamName;
  private final MInternalMacroSetter mInternalMacroSetter = this;

  public MInternalMacroSetter(String pParamName) {
    if(pParamName == null) throw new NullPointerException();
    this.pParamName = pParamName;
  }

  String pParamName() {
    return this.pParamName;
  }

<<<<<<< HEAD
  private String rName() {
    return this.mInternalMacroSetter.pName();
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
  private String rParamName() {
    return this.mInternalMacroSetter.pParamName();
>>>>>>> Init internals before building the macro instead at the add or addAll methods
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("    void set");
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append(rParamName());
=======
    sb.append(rName());
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    sb.append(rParamName());
>>>>>>> Init internals before building the macro instead at the add or addAll methods
    sb.append("(");
    sb.append(System.getProperty("line.separator"));
    sb.append("            Context context,");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append("            InternalValue internal_value) {");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(internal_value == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            throw new RuntimeException(\"macros cannot be null\");");
=======
    sb.append("            Macro macros[]) {");
=======
    sb.append("            List<Macro> macros) {");
>>>>>>> Removed in constructor initialization and add lazy initialization
=======
    sb.append("            InternalValue internal_value) {");
>>>>>>> Add structure which contains list of macros and the context associated
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(internal_value == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            throw new RuntimeException(\"macros cannot be null\");");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
    sb.append("        final List<Macro> tempMacros = new ArrayList<>();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        int i = 0;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        for(Macro macro : macros){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(macro == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                throw ObjectMacroException.macroNull(i, \"param_name\");");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            ");
    for(Object oApplyInternalsInitializer : this.eApplyInternalsInitializer) {
      sb.append(oApplyInternalsInitializer.toString());
    }
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
    sb.append("            tempMacros[i++] = macro;");
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    sb.append("            tempMacros.add(macro);");
>>>>>>> Removed in constructor initialization and add lazy initialization
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
=======
>>>>>>> Add structure which contains list of macros and the context associated
    sb.append("        this.list_");
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append(rParamName());
    sb.append(".put(context, internal_value);");
=======
    sb.append(rName());
=======
    sb.append(rParamName());
<<<<<<< HEAD
>>>>>>> Init internals before building the macro instead at the add or addAll methods
    sb.append(".put(context, tempMacros);");
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    sb.append(".put(context, internal_value);");
>>>>>>> Add structure which contains list of macros and the context associated
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
=======
public class MInternalMacroSetter extends Macro{
>>>>>>> Changement Objectmacro-back

    private String field_Name;

    private Macro list_ListApplyInternalsInitializer[];

    private final Context ListApplyInternalsInitializerContext = new Context();

    public MInternalMacroSetter(String pName, Macro pListApplyInternalsInitializer[]){

        this.setPName(pName);
        this.setPListApplyInternalsInitializer(pListApplyInternalsInitializer);
    }

    private void setPName(String pName){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }

        this.field_Name = pName;
    }

    private void setPListApplyInternalsInitializer(Macro pListApplyInternalsInitializer[]){
        if(pListApplyInternalsInitializer == null){
            throw ObjectMacroException.parameterNull("ListApplyInternalsInitializer");
        }

        Macro macros[] = pListApplyInternalsInitializer;
        this.list_ListApplyInternalsInitializer = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListApplyInternalsInitializer");
            }

            macro.apply(new InternalsInitializer("ListApplyInternalsInitializer"){
@Override
void setApplyInternalsInitializer(MApplyInternalsInitializer mApplyInternalsInitializer){

        }
});

            this.list_ListApplyInternalsInitializer[i++] = macro;

        }
    }

    private String buildName(){

        return this.field_Name;
    }

    private String buildListApplyInternalsInitializer(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListApplyInternalsInitializerContext;
        Macro macros[] = this.list_ListApplyInternalsInitializer;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String getName(){

        return this.field_Name;
    }

    private Macro[] getListApplyInternalsInitializer(){

        return this.list_ListApplyInternalsInitializer;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setInternalMacroSetter(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append("    void set");
        sb0.append(buildName());
        sb0.append("(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Context context,");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Macro macros[]) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(macros == null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            throw new RuntimeException(\"macros cannot be null here\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        Macro[] tempMacros = new Macro[macros.length];");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        int i = 0;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        for(Macro macro : macros)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(macro == null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                throw ObjectMacroException.macroNull(i, \"");
        sb0.append(buildName());
        sb0.append("\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            ");
        sb0.append(buildListApplyInternalsInitializer());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            tempMacros[i++] = macro;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        this.list_");
        sb0.append(buildName());
        sb0.append(".put(context, tempMacros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
