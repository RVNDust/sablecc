/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
import java.util.*;

public class MMacro {

  private final String pName;
  private final MMacro mMacro = this;
  private final List<Object> ePackageDeclaration = new LinkedList<Object>();
  private final List<Object> eImportJavaUtil = new LinkedList<Object>();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  private final List<Object> eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField = new LinkedList<Object>();
=======
  private final List<Object> eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields = new LinkedList<Object>();
>>>>>>> Remove abstraction on directives when building a macro or a parameter
  private final List<Object> eContextField = new LinkedList<Object>();
  private final List<Object> eConstructor = new LinkedList<Object>();
  private final List<Object> eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter = new LinkedList<Object>();
  private final List<Object> eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder = new LinkedList<Object>();
  private final List<Object> eParamStringRef_ParamMacroRef_InternalMacroRef = new LinkedList<Object>();
  private final List<Object> eInitInternalsMethod = new LinkedList<Object>();
  private final List<Object> eInitDirectives = new LinkedList<Object>();
  private final List<Object> eRedefinedApplyInitializer = new LinkedList<Object>();
  private final List<Object> eMacroBuilder = new LinkedList<Object>();
  private final List<Object> eEmptyBuilderWithContext = new LinkedList<Object>();
=======
  private final List<Object> eParamMacroField_ParamStringField_InternalMacroField_InternalStringField = new LinkedList<Object>();
=======
  private final List<Object> eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField = new LinkedList<Object>();
>>>>>>> Add structure which contains list of macros and the context associated
=======
  private final List<Object> eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField = new LinkedList<Object>();
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
  private final List<Object> eContextField = new LinkedList<Object>();
  private final List<Object> eConstructor = new LinkedList<Object>();
  private final List<Object> eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter = new LinkedList<Object>();
  private final List<Object> eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder = new LinkedList<Object>();
  private final List<Object> eParamStringRef_ParamMacroRef_InternalMacroRef = new LinkedList<Object>();
  private final List<Object> eInitInternalsMethod = new LinkedList<Object>();
  private final List<Object> eInitDirectives = new LinkedList<Object>();
  private final List<Object> eRedefinedApplyInitializer = new LinkedList<Object>();
  private final List<Object> eMacroBuilder = new LinkedList<Object>();
<<<<<<< HEAD
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
  private final List<Object> eEmptyBuilderWithContext = new LinkedList<Object>();
>>>>>>> Now macro without internals has a builder with context that only return build

  public MMacro(String pName) {
    if(pName == null) throw new NullPointerException();
    this.pName = pName;
  }

  public MPackageDeclaration newPackageDeclaration(String pPackageName) {
    MPackageDeclaration lPackageDeclaration = new MPackageDeclaration(pPackageName);
    this.ePackageDeclaration.add(lPackageDeclaration);
    return lPackageDeclaration;
  }

  public MImportJavaUtil newImportJavaUtil() {
    MImportJavaUtil lImportJavaUtil = new MImportJavaUtil();
    this.eImportJavaUtil.add(lImportJavaUtil);
    return lImportJavaUtil;
  }

  public MParamMacroField newParamMacroField(String pName) {
    MParamMacroField lParamMacroField = new MParamMacroField(pName);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lParamMacroField);
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.add(lParamMacroField);
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField.add(lParamMacroField);
>>>>>>> Add structure which contains list of macros and the context associated
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lParamMacroField);
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields.add(lParamMacroField);
>>>>>>> Remove abstraction on directives when building a macro or a parameter
    return lParamMacroField;
  }

  public MParamStringField newParamStringField(String pName) {
    MParamStringField lParamStringField = new MParamStringField(pName);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lParamStringField);
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.add(lParamStringField);
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField.add(lParamStringField);
>>>>>>> Add structure which contains list of macros and the context associated
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lParamStringField);
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields.add(lParamStringField);
>>>>>>> Remove abstraction on directives when building a macro or a parameter
    return lParamStringField;
  }

  public MInternalMacroField newInternalMacroField(String pName) {
    MInternalMacroField lInternalMacroField = new MInternalMacroField(pName);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lInternalMacroField);
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.add(lInternalMacroField);
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField.add(lInternalMacroField);
>>>>>>> Add structure which contains list of macros and the context associated
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lInternalMacroField);
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields.add(lInternalMacroField);
>>>>>>> Remove abstraction on directives when building a macro or a parameter
    return lInternalMacroField;
  }

  public MInternalStringField newInternalStringField(String pName) {
    MInternalStringField lInternalStringField = new MInternalStringField(pName);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lInternalStringField);
    return lInternalStringField;
  }

  public MInternalMacrosValueField newInternalMacrosValueField(String pParamName) {
    MInternalMacrosValueField lInternalMacrosValueField = new MInternalMacrosValueField(pParamName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lInternalMacrosValueField);
    return lInternalMacrosValueField;
  }

  public MDirectivesField newDirectivesField(String pParamName) {
    MDirectivesField lDirectivesField = new MDirectivesField(pParamName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lDirectivesField);
    return lDirectivesField;
  }

  public MNoneDirectiveField newNoneDirectiveField(String pParamName) {
    MNoneDirectiveField lNoneDirectiveField = new MNoneDirectiveField(pParamName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lNoneDirectiveField);
    return lNoneDirectiveField;
  }

=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.add(lInternalStringField);
    return lInternalStringField;
  }

>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField.add(lInternalStringField);
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lInternalStringField);
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields.add(lInternalStringField);
>>>>>>> Remove abstraction on directives when building a macro or a parameter
    return lInternalStringField;
  }

  public MInternalMacrosValueField newInternalMacrosValueField(String pParamName) {
    MInternalMacrosValueField lInternalMacrosValueField = new MInternalMacrosValueField(pParamName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields.add(lInternalMacrosValueField);
    return lInternalMacrosValueField;
  }

<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add structure which contains list of macros and the context associated
=======
  public MDirectivesField newDirectivesField(String pParamName) {
    MDirectivesField lDirectivesField = new MDirectivesField(pParamName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lDirectivesField);
    return lDirectivesField;
  }

  public MNoneDirectiveField newNoneDirectiveField(String pParamName) {
    MNoneDirectiveField lNoneDirectiveField = new MNoneDirectiveField(pParamName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.add(lNoneDirectiveField);
    return lNoneDirectiveField;
=======
  public MDirectiveFields newDirectiveFields(String pParamName) {
    MDirectiveFields lDirectiveFields = new MDirectiveFields(pParamName);
    this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields.add(lDirectiveFields);
    return lDirectiveFields;
>>>>>>> Remove abstraction on directives when building a macro or a parameter
  }

>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
  public MContextField newContextField(String pName) {
    MContextField lContextField = new MContextField(pName);
    this.eContextField.add(lContextField);
    return lContextField;
  }

  public MConstructor newConstructor(String pName) {
    MConstructor lConstructor = new MConstructor(pName);
    this.eConstructor.add(lConstructor);
    return lConstructor;
  }

  public MParamStringSetter newParamStringSetter(String pName) {
    MParamStringSetter lParamStringSetter = new MParamStringSetter(pName);
<<<<<<< HEAD
<<<<<<< HEAD
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lParamStringSetter);
    return lParamStringSetter;
  }

  public MAddAll newAddAll(String pParamName) {
    MAddAll lAddAll = new MAddAll(pParamName);
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lAddAll);
    return lAddAll;
  }

  public MSingleAdd newSingleAdd(String pMacroName, String pParamName) {
    MSingleAdd lSingleAdd = new MSingleAdd(pMacroName, pParamName);
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lSingleAdd);
    return lSingleAdd;
=======
    this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.add(lParamStringSetter);
    return lParamStringSetter;
  }

  public MParamMacroSetter newParamMacroSetter(String pParamName, String pMacroName) {
    MParamMacroSetter lParamMacroSetter = new MParamMacroSetter(pParamName, pMacroName);
    this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.add(lParamMacroSetter);
    return lParamMacroSetter;
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lParamStringSetter);
    return lParamStringSetter;
  }

  public MAddAll newAddAll(String pParamName) {
    MAddAll lAddAll = new MAddAll(pParamName);
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lAddAll);
    return lAddAll;
  }

  public MSingleAdd newSingleAdd(String pMacroName, String pParamName) {
    MSingleAdd lSingleAdd = new MSingleAdd(pMacroName, pParamName);
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lSingleAdd);
    return lSingleAdd;
>>>>>>> AddAll and single adds with static overloads
  }

  public MInternalStringSetter newInternalStringSetter(String pName) {
    MInternalStringSetter lInternalStringSetter = new MInternalStringSetter(pName);
<<<<<<< HEAD
<<<<<<< HEAD
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lInternalStringSetter);
    return lInternalStringSetter;
  }

  public MInternalMacroSetter newInternalMacroSetter(String pParamName) {
    MInternalMacroSetter lInternalMacroSetter = new MInternalMacroSetter(pParamName);
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lInternalMacroSetter);
    return lInternalMacroSetter;
  }

  public MParamStringRefBuilder newParamStringRefBuilder(String pName) {
    MParamStringRefBuilder lParamStringRefBuilder = new MParamStringRefBuilder(pName);
    this.eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder.add(lParamStringRefBuilder);
    return lParamStringRefBuilder;
  }

  public MParamMacroRefBuilder newParamMacroRefBuilder(String pName) {
    MParamMacroRefBuilder lParamMacroRefBuilder = new MParamMacroRefBuilder(pName);
    this.eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder.add(lParamMacroRefBuilder);
    return lParamMacroRefBuilder;
  }

  public MInternalMacroRefBuilder newInternalMacroRefBuilder(String pInternalName) {
    MInternalMacroRefBuilder lInternalMacroRefBuilder = new MInternalMacroRefBuilder(pInternalName);
    this.eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder.add(lInternalMacroRefBuilder);
    return lInternalMacroRefBuilder;
  }

  public MParamStringRef newParamStringRef(String pName) {
    MParamStringRef lParamStringRef = new MParamStringRef(pName);
    this.eParamStringRef_ParamMacroRef_InternalMacroRef.add(lParamStringRef);
    return lParamStringRef;
  }

  public MParamMacroRef newParamMacroRef(String pName) {
    MParamMacroRef lParamMacroRef = new MParamMacroRef(pName);
    this.eParamStringRef_ParamMacroRef_InternalMacroRef.add(lParamMacroRef);
    return lParamMacroRef;
  }

  public MInternalMacroRef newInternalMacroRef(String pParamName) {
    MInternalMacroRef lInternalMacroRef = new MInternalMacroRef(pParamName);
    this.eParamStringRef_ParamMacroRef_InternalMacroRef.add(lInternalMacroRef);
    return lInternalMacroRef;
  }

  public MInitInternalsMethod newInitInternalsMethod(String pName) {
    MInitInternalsMethod lInitInternalsMethod = new MInitInternalsMethod(pName);
    this.eInitInternalsMethod.add(lInitInternalsMethod);
    return lInitInternalsMethod;
  }

  public MInitDirectives newInitDirectives(String pParamName) {
    MInitDirectives lInitDirectives = new MInitDirectives(pParamName);
    this.eInitDirectives.add(lInitDirectives);
    return lInitDirectives;
  }

<<<<<<< HEAD
=======
    this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.add(lInternalStringSetter);
=======
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lInternalStringSetter);
>>>>>>> AddAll and single adds with static overloads
    return lInternalStringSetter;
  }

  public MInternalMacroSetter newInternalMacroSetter(String pParamName) {
    MInternalMacroSetter lInternalMacroSetter = new MInternalMacroSetter(pParamName);
    this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.add(lInternalMacroSetter);
    return lInternalMacroSetter;
  }

  public MParamStringRefBuilder newParamStringRefBuilder(String pName) {
    MParamStringRefBuilder lParamStringRefBuilder = new MParamStringRefBuilder(pName);
    this.eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder.add(lParamStringRefBuilder);
    return lParamStringRefBuilder;
  }

  public MParamMacroRefBuilder newParamMacroRefBuilder(String pName, String pIndexBuilder) {
    MParamMacroRefBuilder lParamMacroRefBuilder = new MParamMacroRefBuilder(pName, pIndexBuilder);
    this.eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder.add(lParamMacroRefBuilder);
    return lParamMacroRefBuilder;
  }

  public MInternalMacroRefBuilder newInternalMacroRefBuilder(String pInternalName) {
    MInternalMacroRefBuilder lInternalMacroRefBuilder = new MInternalMacroRefBuilder(pInternalName);
    this.eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder.add(lInternalMacroRefBuilder);
    return lInternalMacroRefBuilder;
  }

  public MParamStringRef newParamStringRef(String pName) {
    MParamStringRef lParamStringRef = new MParamStringRef(pName);
    this.eParamStringRef_ParamMacroRef_InternalMacroRef.add(lParamStringRef);
    return lParamStringRef;
  }

  public MParamMacroRef newParamMacroRef(String pName) {
    MParamMacroRef lParamMacroRef = new MParamMacroRef(pName);
    this.eParamStringRef_ParamMacroRef_InternalMacroRef.add(lParamMacroRef);
    return lParamMacroRef;
  }

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
=======
  public MInternalMacroRef newInternalMacroRef(String pParamName) {
    MInternalMacroRef lInternalMacroRef = new MInternalMacroRef(pParamName);
    this.eParamStringRef_ParamMacroRef_InternalMacroRef.add(lInternalMacroRef);
    return lInternalMacroRef;
  }

>>>>>>> Add structure which contains list of macros and the context associated
  public MInitInternalsMethod newInitInternalsMethod(String pName) {
    MInitInternalsMethod lInitInternalsMethod = new MInitInternalsMethod(pName);
    this.eInitInternalsMethod.add(lInitInternalsMethod);
    return lInitInternalsMethod;
  }

<<<<<<< HEAD
>>>>>>> Init internals before building the macro instead at the add or addAll methods
=======
>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add structure which contains list of macros and the context associated
=======
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
  public MRedefinedApplyInitializer newRedefinedApplyInitializer(String pName) {
    MRedefinedApplyInitializer lRedefinedApplyInitializer = new MRedefinedApplyInitializer(pName);
    this.eRedefinedApplyInitializer.add(lRedefinedApplyInitializer);
    return lRedefinedApplyInitializer;
  }

<<<<<<< HEAD
<<<<<<< HEAD
  public MMacroBuilder newMacroBuilder(String pMacroName) {
    MMacroBuilder lMacroBuilder = new MMacroBuilder(pMacroName);
=======
  public MMacroBuilder newMacroBuilder() {
    MMacroBuilder lMacroBuilder = new MMacroBuilder();
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
  public MMacroBuilder newMacroBuilder(String pMacroName) {
    MMacroBuilder lMacroBuilder = new MMacroBuilder(pMacroName);
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
    this.eMacroBuilder.add(lMacroBuilder);
    return lMacroBuilder;
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Now macro without internals has a builder with context that only return build
  public MEmptyBuilderWithContext newEmptyBuilderWithContext() {
    MEmptyBuilderWithContext lEmptyBuilderWithContext = new MEmptyBuilderWithContext();
    this.eEmptyBuilderWithContext.add(lEmptyBuilderWithContext);
    return lEmptyBuilderWithContext;
  }

<<<<<<< HEAD
=======
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
>>>>>>> Now macro without internals has a builder with context that only return build
  String pName() {
    return this.pName;
  }

  private String rName() {
    return this.mMacro.pName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(new MHeader().toString());
    if(this.ePackageDeclaration.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oPackageDeclaration : this.ePackageDeclaration) {
      sb.append(oPackageDeclaration.toString());
    }
    if(this.eImportJavaUtil.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oImportJavaUtil : this.eImportJavaUtil) {
      sb.append(oImportJavaUtil.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("public class M");
    sb.append(rName());
    sb.append(" extends Macro{");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    if(this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.size() > 0) {
=======
    if(this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField.size() > 0) {
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    if(this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField.size() > 0) {
>>>>>>> Add structure which contains list of macros and the context associated
=======
    if(this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.size() > 0) {
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
    if(this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields.size() > 0) {
>>>>>>> Remove abstraction on directives when building a macro or a parameter
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      for(Object oParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField : this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField) {
=======
      for(Object oParamMacroField_ParamStringField_InternalMacroField_InternalStringField : this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField) {
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
      for(Object oParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField : this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField) {
>>>>>>> Add structure which contains list of macros and the context associated
=======
      for(Object oParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField : this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField) {
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
      for(Object oParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields : this.eParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields) {
>>>>>>> Remove abstraction on directives when building a macro or a parameter
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        sb.append(oParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.toString());
=======
        sb.append(oParamMacroField_ParamStringField_InternalMacroField_InternalStringField.toString());
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
        sb.append(oParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField.toString());
>>>>>>> Add structure which contains list of macros and the context associated
=======
        sb.append(oParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectivesField_NoneDirectiveField.toString());
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
        sb.append(oParamMacroField_ParamStringField_InternalMacroField_InternalStringField_InternalMacrosValueField_DirectiveFields.toString());
>>>>>>> Remove abstraction on directives when building a macro or a parameter
      }
    }
    if(this.eContextField.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oContextField : this.eContextField) {
      sb.append(oContextField.toString());
    }
    if(this.eConstructor.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oConstructor : this.eConstructor) {
      sb.append(oConstructor.toString());
    }
<<<<<<< HEAD
<<<<<<< HEAD
    if(this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.size() > 0) {
=======
    if(this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.size() > 0) {
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    if(this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.size() > 0) {
>>>>>>> AddAll and single adds with static overloads
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
<<<<<<< HEAD
<<<<<<< HEAD
      for(Object oParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter : this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter) {
=======
      for(Object oParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter : this.eParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter) {
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
<<<<<<< HEAD
        sb.append(oParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.toString());
      }
    }
    if(this.eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder.size() > 0) {
<<<<<<< HEAD
      sb.append(System.getProperty("line.separator"));
=======
public class MMacro extends Macro{

    private String field_Name;

    private Macro list_ListPackage[];

    private Macro list_ListField[];

    private Macro list_ListContextField[];

    private Macro list_ListConstructor[];

    private Macro list_ListSetter[];

    private Macro list_ListBuilder[];

    private Macro list_ListRef[];

    private Macro list_ListRedefinedApplyInitializer[];

    private Macro list_ListMacroBuilder[];

    private Macro list_ListEmptyBuilderWithContext[];

    private final Context ListPackageContext = new Context();
    private final Context ListFieldContext = new Context();
    private final Context ListContextFieldContext = new Context();
    private final Context ListConstructorContext = new Context();
    private final Context ListSetterContext = new Context();
    private final Context ListBuilderContext = new Context();
    private final Context ListRefContext = new Context();
    private final Context ListRedefinedApplyInitializerContext = new Context();
    private final Context ListMacroBuilderContext = new Context();
    private final Context ListEmptyBuilderWithContextContext = new Context();

    public MMacro(String pName, Macro pListPackage[], Macro pListField[], Macro pListContextField[], Macro pListConstructor[], Macro pListSetter[], Macro pListBuilder[], Macro pListRef[], Macro pListRedefinedApplyInitializer[], Macro pListMacroBuilder[], Macro pListEmptyBuilderWithContext[]){

        this.setPName(pName);
        this.setPListPackage(pListPackage);
        this.setPListField(pListField);
        this.setPListContextField(pListContextField);
        this.setPListConstructor(pListConstructor);
        this.setPListSetter(pListSetter);
        this.setPListBuilder(pListBuilder);
        this.setPListRef(pListRef);
        this.setPListRedefinedApplyInitializer(pListRedefinedApplyInitializer);
        this.setPListMacroBuilder(pListMacroBuilder);
        this.setPListEmptyBuilderWithContext(pListEmptyBuilderWithContext);
    }

    private void setPName(String pName){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }

        this.field_Name = pName;
    }

    private void setPListPackage(Macro pListPackage[]){
        if(pListPackage == null){
            throw ObjectMacroException.parameterNull("ListPackage");
        }

        Macro macros[] = pListPackage;
        this.list_ListPackage = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListPackage");
            }

            macro.apply(new InternalsInitializer("ListPackage"){
@Override
void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){

        }
});

            this.list_ListPackage[i++] = macro;

        }
>>>>>>> Changement Objectmacro-back
    }

    private void setPListField(Macro pListField[]){
        if(pListField == null){
            throw ObjectMacroException.parameterNull("ListField");
        }

        Macro macros[] = pListField;
        this.list_ListField = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListField");
            }

            macro.apply(new InternalsInitializer("ListField"){
@Override
void setParamMacroField(MParamMacroField mParamMacroField){

        }
@Override
void setParamStringField(MParamStringField mParamStringField){

        }
@Override
void setInternalMacroField(MInternalMacroField mInternalMacroField){

        }
@Override
void setInternalStringField(MInternalStringField mInternalStringField){

        }
});

            this.list_ListField[i++] = macro;

        }
    }

    private void setPListContextField(Macro pListContextField[]){
        if(pListContextField == null){
            throw ObjectMacroException.parameterNull("ListContextField");
        }

        Macro macros[] = pListContextField;
        this.list_ListContextField = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListContextField");
            }

            macro.apply(new InternalsInitializer("ListContextField"){
@Override
void setContextField(MContextField mContextField){

        }
});

            this.list_ListContextField[i++] = macro;

        }
    }

    private void setPListConstructor(Macro pListConstructor[]){
        if(pListConstructor == null){
            throw ObjectMacroException.parameterNull("ListConstructor");
        }

        Macro macros[] = pListConstructor;
        this.list_ListConstructor = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListConstructor");
            }

            macro.apply(new InternalsInitializer("ListConstructor"){
@Override
void setConstructor(MConstructor mConstructor){

        }
});

            this.list_ListConstructor[i++] = macro;

        }
    }
<<<<<<< HEAD
    {
      boolean first = true;
      for(Object oInitInternalsMethod : this.eInitInternalsMethod) {
=======
      for(Object oParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter : this.eParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter) {
>>>>>>> AddAll and single adds with static overloads
        if(first) {
          first = false;
=======

    private void setPListSetter(Macro pListSetter[]){
        if(pListSetter == null){
            throw ObjectMacroException.parameterNull("ListSetter");
>>>>>>> Changement Objectmacro-back
        }

        Macro macros[] = pListSetter;
        this.list_ListSetter = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListSetter");
            }

            macro.apply(new InternalsInitializer("ListSetter"){
@Override
void setParamStringSetter(MParamStringSetter mParamStringSetter){

        }
@Override
void setParamMacroSetter(MParamMacroSetter mParamMacroSetter){

        }
@Override
void setInternalStringSetter(MInternalStringSetter mInternalStringSetter){

        }
@Override
void setInternalMacroSetter(MInternalMacroSetter mInternalMacroSetter){

        }
});

            this.list_ListSetter[i++] = macro;

        }
<<<<<<< HEAD
<<<<<<< HEAD
        sb.append(oInitInternalsMethod.toString());
      }
=======
>>>>>>> Changement Objectmacro-back
    }

    private void setPListBuilder(Macro pListBuilder[]){
        if(pListBuilder == null){
            throw ObjectMacroException.parameterNull("ListBuilder");
        }

        Macro macros[] = pListBuilder;
        this.list_ListBuilder = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListBuilder");
            }

            macro.apply(new InternalsInitializer("ListBuilder"){
@Override
void setParamStringRefBuilder(MParamStringRefBuilder mParamStringRefBuilder){

        }
@Override
void setParamMacroRefBuilder(MParamMacroRefBuilder mParamMacroRefBuilder){

        }
});

            this.list_ListBuilder[i++] = macro;

        }
    }

    private void setPListRef(Macro pListRef[]){
        if(pListRef == null){
            throw ObjectMacroException.parameterNull("ListRef");
        }

        Macro macros[] = pListRef;
        this.list_ListRef = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListRef");
            }

            macro.apply(new InternalsInitializer("ListRef"){
@Override
void setParamStringRef(MParamStringRef mParamStringRef){

        }
@Override
void setParamMacroRef(MParamMacroRef mParamMacroRef){

        }
});

            this.list_ListRef[i++] = macro;

        }
    }

    private void setPListRedefinedApplyInitializer(Macro pListRedefinedApplyInitializer[]){
        if(pListRedefinedApplyInitializer == null){
            throw ObjectMacroException.parameterNull("ListRedefinedApplyInitializer");
        }

        Macro macros[] = pListRedefinedApplyInitializer;
        this.list_ListRedefinedApplyInitializer = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListRedefinedApplyInitializer");
            }

            macro.apply(new InternalsInitializer("ListRedefinedApplyInitializer"){
@Override
void setRedefinedApplyInitializer(MRedefinedApplyInitializer mRedefinedApplyInitializer){

        }
});

            this.list_ListRedefinedApplyInitializer[i++] = macro;

        }
    }

    private void setPListMacroBuilder(Macro pListMacroBuilder[]){
        if(pListMacroBuilder == null){
            throw ObjectMacroException.parameterNull("ListMacroBuilder");
        }

        Macro macros[] = pListMacroBuilder;
        this.list_ListMacroBuilder = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListMacroBuilder");
            }

            macro.apply(new InternalsInitializer("ListMacroBuilder"){
@Override
void setMacroBuilder(MMacroBuilder mMacroBuilder){

        }
});

            this.list_ListMacroBuilder[i++] = macro;

        }
    }

    private void setPListEmptyBuilderWithContext(Macro pListEmptyBuilderWithContext[]){
        if(pListEmptyBuilderWithContext == null){
            throw ObjectMacroException.parameterNull("ListEmptyBuilderWithContext");
        }

        Macro macros[] = pListEmptyBuilderWithContext;
        this.list_ListEmptyBuilderWithContext = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListEmptyBuilderWithContext");
            }

            macro.apply(new InternalsInitializer("ListEmptyBuilderWithContext"){
@Override
void setEmptyBuilderWithContext(MEmptyBuilderWithContext mEmptyBuilderWithContext){

        }
});

            this.list_ListEmptyBuilderWithContext[i++] = macro;

        }
    }

    private String buildName(){

        return this.field_Name;
    }

    private String buildListPackage(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListPackageContext;
        Macro macros[] = this.list_ListPackage;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListField(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListFieldContext;
        Macro macros[] = this.list_ListField;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            if(first) {
  first = false;
}
else {
           sb0.append(LINE_SEPARATOR);
}

            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListContextField(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListContextFieldContext;
        Macro macros[] = this.list_ListContextField;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListConstructor(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListConstructorContext;
        Macro macros[] = this.list_ListConstructor;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListSetter(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListSetterContext;
        Macro macros[] = this.list_ListSetter;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            if(first) {
  first = false;
}
else {
           sb0.append(LINE_SEPARATOR);
}

            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListBuilder(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListBuilderContext;
        Macro macros[] = this.list_ListBuilder;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            if(first) {
  first = false;
}
else {
           sb0.append(LINE_SEPARATOR);
}

            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListRef(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListRefContext;
        Macro macros[] = this.list_ListRef;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            if(first) {
  first = false;
}
else {
           sb0.append(LINE_SEPARATOR);
}

            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListRedefinedApplyInitializer(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListRedefinedApplyInitializerContext;
        Macro macros[] = this.list_ListRedefinedApplyInitializer;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListMacroBuilder(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListMacroBuilderContext;
        Macro macros[] = this.list_ListMacroBuilder;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListEmptyBuilderWithContext(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListEmptyBuilderWithContextContext;
        Macro macros[] = this.list_ListEmptyBuilderWithContext;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String getName(){

        return this.field_Name;
    }

    private Macro[] getListPackage(){

        return this.list_ListPackage;
    }

    private Macro[] getListField(){

        return this.list_ListField;
    }

    private Macro[] getListContextField(){

        return this.list_ListContextField;
    }
<<<<<<< HEAD
=======
        sb.append(oParamStringSetter_ParamMacroSetter_InternalStringSetter_InternalMacroSetter.toString());
=======
        sb.append(oParamStringSetter_AddAll_SingleAdd_InternalStringSetter_InternalMacroSetter.toString());
>>>>>>> AddAll and single adds with static overloads
      }
    }
    if(this.eParamStringRefBuilder_ParamMacroRefBuilder.size() > 0) {
=======
>>>>>>> Add structure which contains list of macros and the context associated
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
      for(Object oParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder : this.eParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oParamStringRefBuilder_ParamMacroRefBuilder_InternalMacroRefBuilder.toString());
      }
    }
    if(this.eParamStringRef_ParamMacroRef_InternalMacroRef.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
      for(Object oParamStringRef_ParamMacroRef_InternalMacroRef : this.eParamStringRef_ParamMacroRef_InternalMacroRef) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oParamStringRef_ParamMacroRef_InternalMacroRef.toString());
      }
    }
    {
      boolean first = true;
      for(Object oInitInternalsMethod : this.eInitInternalsMethod) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oInitInternalsMethod.toString());
      }
    }
    if(this.eInitDirectives.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    {
      boolean first = true;
      for(Object oInitDirectives : this.eInitDirectives) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oInitDirectives.toString());
      }
    }
    for(Object oRedefinedApplyInitializer : this.eRedefinedApplyInitializer) {
      sb.append(oRedefinedApplyInitializer.toString());
    }
    if(this.eMacroBuilder.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oMacroBuilder : this.eMacroBuilder) {
      sb.append(oMacroBuilder.toString());
    }
<<<<<<< HEAD
    sb.append(System.getProperty("line.separator"));
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    if(this.eEmptyBuilderWithContext.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oEmptyBuilderWithContext : this.eEmptyBuilderWithContext) {
      sb.append(oEmptyBuilderWithContext.toString());
    }
>>>>>>> Now macro without internals has a builder with context that only return build
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
=======
>>>>>>> Changement Objectmacro-back

    private Macro[] getListConstructor(){

        return this.list_ListConstructor;
    }

    private Macro[] getListSetter(){

        return this.list_ListSetter;
    }

    private Macro[] getListBuilder(){

        return this.list_ListBuilder;
    }

    private Macro[] getListRef(){

        return this.list_ListRef;
    }

    private Macro[] getListRedefinedApplyInitializer(){

        return this.list_ListRedefinedApplyInitializer;
    }

    private Macro[] getListMacroBuilder(){

        return this.list_ListMacroBuilder;
    }

    private Macro[] getListEmptyBuilderWithContext(){

        return this.list_ListEmptyBuilderWithContext;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setMacro(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        MHeader minsert_1 = new MHeader();
                        sb0.append(minsert_1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListPackage());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        MImportJavaUtil minsert_2 = new MImportJavaUtil();
                        sb0.append(minsert_2.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("public class M");
        sb0.append(buildName());
        sb0.append(" extends Macro");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListField());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListContextField());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListConstructor());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListSetter());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListBuilder());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListRef());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListRedefinedApplyInitializer());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListMacroBuilder());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListEmptyBuilderWithContext());
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
