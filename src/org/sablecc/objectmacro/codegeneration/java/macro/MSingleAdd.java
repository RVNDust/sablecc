/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public class MSingleAdd {

  private final String pMacroName;
  private final String pParamName;
  private final MSingleAdd mSingleAdd = this;
<<<<<<< HEAD
<<<<<<< HEAD
  private final List<Object> eIsBuilt = new LinkedList<Object>();
<<<<<<< HEAD
=======
  private final List<Object> eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart = new LinkedList<Object>();
  private final List<Object> eSetInternal = new LinkedList<Object>();
>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add structure which contains list of macros and the context associated
=======
  private final List<Object> eIsBuilt = new LinkedList<Object>();
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method

  public MSingleAdd(String pMacroName, String pParamName) {
    if(pMacroName == null) throw new NullPointerException();
    this.pMacroName = pMacroName;
    if(pParamName == null) throw new NullPointerException();
    this.pParamName = pParamName;
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
  public MIsBuilt newIsBuilt(String pMacroName) {
    MIsBuilt lIsBuilt = new MIsBuilt(pMacroName);
    this.eIsBuilt.add(lIsBuilt);
    return lIsBuilt;
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
  public MInitStringBuilder newInitStringBuilder(String pIndexBuilder) {
    MInitStringBuilder lInitStringBuilder = new MInitStringBuilder(pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lInitStringBuilder);
    return lInitStringBuilder;
  }

  public MStringPart newStringPart(String pString, String pIndexBuilder) {
    MStringPart lStringPart = new MStringPart(pString, pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lStringPart);
    return lStringPart;
  }

  public MParamInsertPart newParamInsertPart(String pParamName, String pIndexBuilder) {
    MParamInsertPart lParamInsertPart = new MParamInsertPart(pParamName, pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lParamInsertPart);
    return lParamInsertPart;
  }

  public MEolPart newEolPart(String pIndexBuilder) {
    MEolPart lEolPart = new MEolPart(pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lEolPart);
    return lEolPart;
  }

  public MInsertMacroPart newInsertMacroPart(String pName, String pIndexBuilder, String pIndexInsert) {
    MInsertMacroPart lInsertMacroPart = new MInsertMacroPart(pName, pIndexBuilder, pIndexInsert);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lInsertMacroPart);
    return lInsertMacroPart;
  }

  public MSetInternal newSetInternal(String pMacroName, String pParamName, String pContext) {
    MSetInternal lSetInternal = new MSetInternal(pMacroName, pParamName, pContext);
    this.eSetInternal.add(lSetInternal);
    return lSetInternal;
  }

>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add structure which contains list of macros and the context associated
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
  String pMacroName() {
    return this.pMacroName;
  }

  String pParamName() {
    return this.pParamName;
  }

  private String rParamName() {
    return this.mSingleAdd.pParamName();
  }

  private String rMacroName() {
    return this.mSingleAdd.pMacroName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append("    public void add");
=======
    sb.append("    public void addP");
>>>>>>> AddAll and single adds with static overloads
=======
    sb.append("    public void add");
>>>>>>> Removed letter P from add and addAll methods name
    sb.append(rParamName());
    sb.append("(M");
    sb.append(rMacroName());
    sb.append(" macro){");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(macro == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            throw ObjectMacroException.parameterNull(\"");
    sb.append(rParamName());
    sb.append("\");");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
=======
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
    sb.append("        ");
    for(Object oIsBuilt : this.eIsBuilt) {
      sb.append(oIsBuilt.toString());
    }
<<<<<<< HEAD
<<<<<<< HEAD
=======
    sb.append("        ");
    {
      boolean first = true;
      for(Object oInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart : this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.toString());
      }
    }
    sb.append("        ");
    for(Object oSetInternal : this.eSetInternal) {
      sb.append(oSetInternal.toString());
    }
>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
    sb.append(System.getProperty("line.separator"));
=======
>>>>>>> Add structure which contains list of macros and the context associated
    sb.append("        this.list_");
    sb.append(rParamName());
    sb.append(".add(macro);");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
