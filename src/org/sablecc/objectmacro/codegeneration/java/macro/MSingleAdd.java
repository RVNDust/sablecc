/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
import java.util.*;

public class MSingleAdd {

  private final String pMacroName;
  private final String pParamName;
  private final MSingleAdd mSingleAdd = this;
<<<<<<< HEAD
<<<<<<< HEAD
  private final List<Object> eIsBuilt = new LinkedList<Object>();
<<<<<<< HEAD
=======
  private final List<Object> eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart = new LinkedList<Object>();
  private final List<Object> eSetInternal = new LinkedList<Object>();
>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add structure which contains list of macros and the context associated
=======
  private final List<Object> eIsBuilt = new LinkedList<Object>();
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method

  public MSingleAdd(String pMacroName, String pParamName) {
    if(pMacroName == null) throw new NullPointerException();
    this.pMacroName = pMacroName;
    if(pParamName == null) throw new NullPointerException();
    this.pParamName = pParamName;
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
  public MIsBuilt newIsBuilt(String pMacroName) {
    MIsBuilt lIsBuilt = new MIsBuilt(pMacroName);
    this.eIsBuilt.add(lIsBuilt);
    return lIsBuilt;
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
  public MInitStringBuilder newInitStringBuilder(String pIndexBuilder) {
    MInitStringBuilder lInitStringBuilder = new MInitStringBuilder(pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lInitStringBuilder);
    return lInitStringBuilder;
  }

  public MStringPart newStringPart(String pString, String pIndexBuilder) {
    MStringPart lStringPart = new MStringPart(pString, pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lStringPart);
    return lStringPart;
  }

  public MParamInsertPart newParamInsertPart(String pParamName, String pIndexBuilder) {
    MParamInsertPart lParamInsertPart = new MParamInsertPart(pParamName, pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lParamInsertPart);
    return lParamInsertPart;
  }

  public MEolPart newEolPart(String pIndexBuilder) {
    MEolPart lEolPart = new MEolPart(pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lEolPart);
    return lEolPart;
  }

  public MInsertMacroPart newInsertMacroPart(String pName, String pIndexBuilder, String pIndexInsert) {
    MInsertMacroPart lInsertMacroPart = new MInsertMacroPart(pName, pIndexBuilder, pIndexInsert);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lInsertMacroPart);
    return lInsertMacroPart;
  }

  public MSetInternal newSetInternal(String pMacroName, String pParamName, String pContext) {
    MSetInternal lSetInternal = new MSetInternal(pMacroName, pParamName, pContext);
    this.eSetInternal.add(lSetInternal);
    return lSetInternal;
  }

>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add structure which contains list of macros and the context associated
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
  String pMacroName() {
    return this.pMacroName;
  }

  String pParamName() {
    return this.pParamName;
  }

  private String rParamName() {
    return this.mSingleAdd.pParamName();
  }

  private String rMacroName() {
    return this.mSingleAdd.pMacroName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append("    public void add");
=======
    sb.append("    public void addP");
>>>>>>> AddAll and single adds with static overloads
=======
    sb.append("    public void add");
>>>>>>> Removed letter P from add and addAll methods name
    sb.append(rParamName());
    sb.append("(M");
    sb.append(rMacroName());
    sb.append(" macro){");
    sb.append(System.getProperty("line.separator"));
    sb.append("        if(macro == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            throw ObjectMacroException.parameterNull(\"");
    sb.append(rParamName());
    sb.append("\");");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
=======
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
    sb.append("        ");
    for(Object oIsBuilt : this.eIsBuilt) {
      sb.append(oIsBuilt.toString());
    }
<<<<<<< HEAD
<<<<<<< HEAD
=======
    sb.append("        ");
    {
      boolean first = true;
      for(Object oInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart : this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart) {
        if(first) {
          first = false;
        }
        else {
          sb.append(System.getProperty("line.separator"));
        }
        sb.append(oInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.toString());
      }
    }
    sb.append("        ");
    for(Object oSetInternal : this.eSetInternal) {
      sb.append(oSetInternal.toString());
    }
>>>>>>> AddAll and single adds with static overloads
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
    sb.append(System.getProperty("line.separator"));
=======
>>>>>>> Add structure which contains list of macros and the context associated
    sb.append("        this.list_");
    sb.append(rParamName());
    sb.append(".add(macro);");
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
=======
public class MSingleAdd extends Macro{

    private String field_MacroName;

    private String field_ParamName;

    private Macro list_IsBuilt[];

    private final Context IsBuiltContext = new Context();

    public MSingleAdd(String pMacroName, String pParamName, Macro pIsBuilt[]){

        this.setPMacroName(pMacroName);
        this.setPParamName(pParamName);
        this.setPIsBuilt(pIsBuilt);
    }

    private void setPMacroName(String pMacroName){
        if(pMacroName == null){
            throw ObjectMacroException.parameterNull("MacroName");
        }

        this.field_MacroName = pMacroName;
    }

    private void setPParamName(String pParamName){
        if(pParamName == null){
            throw ObjectMacroException.parameterNull("ParamName");
        }

        this.field_ParamName = pParamName;
    }

    private void setPIsBuilt(Macro pIsBuilt[]){
        if(pIsBuilt == null){
            throw ObjectMacroException.parameterNull("IsBuilt");
        }

        Macro macros[] = pIsBuilt;
        this.list_IsBuilt = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "IsBuilt");
            }

            macro.apply(new InternalsInitializer("IsBuilt"){
@Override
void setIsBuilt(MIsBuilt mIsBuilt){

                mIsBuilt.setMacroName(IsBuiltContext, getMacroName());
}
});

            this.list_IsBuilt[i++] = macro;

        }
    }

    private String buildMacroName(){

        return this.field_MacroName;
    }

    private String buildParamName(){

        return this.field_ParamName;
    }
>>>>>>> MaJ Fichier de Macro + Generation

    private String buildIsBuilt(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = IsBuiltContext;
        Macro macros[] = this.list_IsBuilt;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String getMacroName(){

        return this.field_MacroName;
    }

    private String getParamName(){

        return this.field_ParamName;
    }

    private Macro[] getIsBuilt(){

        return this.list_IsBuilt;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setSingleAdd(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append("    public void add");
        sb0.append(buildParamName());
        sb0.append("(M");
        sb0.append(buildMacroName());
        sb0.append(" macro)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(macro == null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            throw ObjectMacroException.parameterNull(\"");
        sb0.append(buildParamName());
        sb0.append("\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append(buildIsBuilt());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        this.list_");
        sb0.append(buildParamName());
        sb0.append(".add(macro);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
