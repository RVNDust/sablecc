/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "Changement Objectmacro-back"
import java.util.*;

public class MRedefinedInternalsSetter {

  private final String pName;
  private final MRedefinedInternalsSetter mRedefinedInternalsSetter = this;
  private final List<Object> eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart = new LinkedList<Object>();
  private final List<Object> eSetInternal = new LinkedList<Object>();

  public MRedefinedInternalsSetter(String pName) {
    if(pName == null) throw new NullPointerException();
    this.pName = pName;
  }

  public MInitStringBuilder newInitStringBuilder(String pIndexBuilder) {
    MInitStringBuilder lInitStringBuilder = new MInitStringBuilder(pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lInitStringBuilder);
    return lInitStringBuilder;
  }

  public MStringPart newStringPart(String pString, String pIndexBuilder) {
    MStringPart lStringPart = new MStringPart(pString, pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lStringPart);
    return lStringPart;
  }

  public MParamInsertPart newParamInsertPart(String pParamName, String pIndexBuilder) {
    MParamInsertPart lParamInsertPart = new MParamInsertPart(pParamName, pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lParamInsertPart);
    return lParamInsertPart;
  }

  public MEolPart newEolPart(String pIndexBuilder) {
    MEolPart lEolPart = new MEolPart(pIndexBuilder);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lEolPart);
    return lEolPart;
  }

  public MInsertMacroPart newInsertMacroPart(String pName, String pIndexBuilder, String pIndexInsert) {
    MInsertMacroPart lInsertMacroPart = new MInsertMacroPart(pName, pIndexBuilder, pIndexInsert);
    this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lInsertMacroPart);
    return lInsertMacroPart;
  }

  public MSetInternal newSetInternal(String pMacroName, String pParamName, String pContext) {
    MSetInternal lSetInternal = new MSetInternal(pMacroName, pParamName, pContext);
    this.eSetInternal.add(lSetInternal);
    return lSetInternal;
  }

  String pName() {
    return this.pName;
  }

  private String rName() {
    return this.mRedefinedInternalsSetter.pName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append("@Override");
    sb.append(System.getProperty("line.separator"));
    sb.append("void set");
=======
    sb.append("    @Override");
    sb.append(System.getProperty("line.separator"));
    sb.append("    void set");
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    sb.append("@Override");
    sb.append(System.getProperty("line.separator"));
    sb.append("void set");
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
=======
    sb.append("@Override");
    sb.append(System.getProperty("line.separator"));
    sb.append("void set");
>>>>>>> Revert "Changement Objectmacro-back"
    sb.append(rName());
    sb.append("(M");
    sb.append(rName());
    sb.append(" m");
    sb.append(rName());
    sb.append("){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append("    ");
=======
    sb.append("        ");
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    sb.append("    ");
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
=======
    sb.append("    ");
>>>>>>> Revert "Changement Objectmacro-back"
    {
      boolean first = true;
      for(Object oInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart : this.eInitStringBuilder_StringPart_ParamInsertPart_EolPart_InsertMacroPart) {
        if(first) {
          first = false;
<<<<<<< HEAD
=======
=======
>>>>>>> MaJ Fichier de Macro + Generation
public class MRedefinedInternalsSetter extends Macro{

    private String field_Name;

    private Macro list_ListPart[];

    private Macro list_ListSetInternal[];

    private final Context ListPartContext = new Context();
    private final Context ListSetInternalContext = new Context();

    public MRedefinedInternalsSetter(String pName, Macro pListPart[], Macro pListSetInternal[]){

        this.setPName(pName);
        this.setPListPart(pListPart);
        this.setPListSetInternal(pListSetInternal);
    }

    private void setPName(String pName){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }

        this.field_Name = pName;
    }

    private void setPListPart(Macro pListPart[]){
        if(pListPart == null){
            throw ObjectMacroException.parameterNull("ListPart");
        }

        Macro macros[] = pListPart;
        this.list_ListPart = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListPart");
            }

            macro.apply(new InternalsInitializer("ListPart"){
@Override
void setInitStringBuilder(MInitStringBuilder mInitStringBuilder){

        }
@Override
void setStringPart(MStringPart mStringPart){

<<<<<<< HEAD
>>>>>>> Changement Objectmacro-back
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> MaJ Fichier de Macro + Generation
        }
@Override
void setParamInsertPart(MParamInsertPart mParamInsertPart){

        }
@Override
void setEolPart(MEolPart mEolPart){

        }
@Override
void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){

        }
});

            this.list_ListPart[i++] = macro;

        }
    }

    private void setPListSetInternal(Macro pListSetInternal[]){
        if(pListSetInternal == null){
            throw ObjectMacroException.parameterNull("ListSetInternal");
        }

        Macro macros[] = pListSetInternal;
        this.list_ListSetInternal = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListSetInternal");
            }

            macro.apply(new InternalsInitializer("ListSetInternal"){
@Override
void setSetInternal(MSetInternal mSetInternal){

        }
});

            this.list_ListSetInternal[i++] = macro;

        }
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append("    ");
    for(Object oSetInternal : this.eSetInternal) {
      sb.append(oSetInternal.toString());
    }
    sb.append("}");
=======
    sb.append("        ");
    for(Object oSetInternal : this.eSetInternal) {
      sb.append(oSetInternal.toString());
    }
    sb.append("    }");
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    sb.append("    ");
    for(Object oSetInternal : this.eSetInternal) {
      sb.append(oSetInternal.toString());
    }
    sb.append("}");
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
=======
=======
>>>>>>> MaJ Fichier de Macro + Generation

    private String buildName(){

        return this.field_Name;
    }

    private String buildListPart(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListPartContext;
        Macro macros[] = this.list_ListPart;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        if(first) {
  first = false;
}
else {
           sb0.append(LINE_SEPARATOR);
}

            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListSetInternal(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListSetInternalContext;
        Macro macros[] = this.list_ListSetInternal;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String getName(){

        return this.field_Name;
    }

    private Macro[] getListPart(){

        return this.list_ListPart;
    }

    private Macro[] getListSetInternal(){

        return this.list_ListSetInternal;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setRedefinedInternalsSetter(this);
<<<<<<< HEAD
    }
>>>>>>> Changement Objectmacro-back
=======
    sb.append("    ");
    for(Object oSetInternal : this.eSetInternal) {
      sb.append(oSetInternal.toString());
    }
    sb.append("}");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
>>>>>>> Revert "Changement Objectmacro-back"
=======
    }
>>>>>>> MaJ Fichier de Macro + Generation

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append("@Override");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void set");
        sb0.append(buildName());
        sb0.append("(M");
        sb0.append(buildName());
        sb0.append(" m");
        sb0.append(buildName());
        sb0.append(")");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append(buildListPart());
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append(buildListSetInternal());
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
