/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
<<<<<<< HEAD
public class MStringPart {

  private final String pString;
  private final String pIndexBuilder;
  private final MStringPart mStringPart = this;

  public MStringPart(String pString, String pIndexBuilder) {
    if(pString == null) throw new NullPointerException();
    this.pString = pString;
    if(pIndexBuilder == null) throw new NullPointerException();
    this.pIndexBuilder = pIndexBuilder;
  }

  String pString() {
    return this.pString;
  }

  String pIndexBuilder() {
    return this.pIndexBuilder;
  }

  private String rIndexBuilder() {
    return this.mStringPart.pIndexBuilder();
  }

  private String rString() {
    return this.mStringPart.pString();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("        sb");
    sb.append(rIndexBuilder());
    sb.append(".append(\"");
    sb.append(rString());
    sb.append("\");");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

=======
import java.util.*;

public class MStringPart extends Macro{

    private String field_String;
    private String field_IndexBuilder;


=======
import java.util.*;

public class MStringPart extends Macro{

    private String field_String;
    private String field_IndexBuilder;


>>>>>>> object-macro2.1
    public MStringPart(String pString, String pIndexBuilder){

        this.setPString(pString);        this.setPIndexBuilder(pIndexBuilder);


    }

    private void setPString( String pString ){
        if(pString == null){
            throw ObjectMacroException.parameterNull("String");
<<<<<<< HEAD
        }

        this.field_String = pString;
=======
        }

        this.field_String = pString;
    }
    private void setPIndexBuilder( String pIndexBuilder ){
        if(pIndexBuilder == null){
            throw ObjectMacroException.parameterNull("IndexBuilder");
        }

        this.field_IndexBuilder = pIndexBuilder;
>>>>>>> object-macro2.1
    }
    private void setPIndexBuilder( String pIndexBuilder ){
        if(pIndexBuilder == null){
            throw ObjectMacroException.parameterNull("IndexBuilder");
        }

<<<<<<< HEAD
        this.field_IndexBuilder = pIndexBuilder;
    }

=======
>>>>>>> object-macro2.1
    private String buildString(){

        return this.field_String;
    }
    private String buildIndexBuilder(){

        return this.field_IndexBuilder;
    }

    private String getString(){

        return this.field_String;
    }
    private String getIndexBuilder(){

        return this.field_IndexBuilder;
    }


    @Override
    void apply(
            InternalsInitializer internalsInitializer){
<<<<<<< HEAD

        internalsInitializer.setStringPart(this);
    }

   @Override
    public String build(){

        BuildState buildState = this.build_state;

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("StringPart");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;

        

        

        StringBuilder sb0 = new StringBuilder();

        sb0.append("        sb");
        sb0.append(buildIndexBuilder());
        sb0.append(".append(\"");
        sb0.append(buildString());
        sb0.append("\");");

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }

=======

        internalsInitializer.setStringPart(this);
    }

   @Override
    public String build(){

        BuildState buildState = this.build_state;

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("StringPart");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;

        

        

        StringBuilder sb0 = new StringBuilder();

        sb0.append("        sb");
        sb0.append(buildIndexBuilder());
        sb0.append(".append(\"");
        sb0.append(buildString());
        sb0.append("\");");

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }

>>>>>>> object-macro2.1
    @Override
    String build(Context context) {
        return build();
    }
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Mise Ã  jour Visiteur - Build OK
}
=======
}
>>>>>>> Correctifs objectmacro2-java(back)
=======
}
>>>>>>> object-macro2.1
