/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
import java.util.*;

public class MMacroBuilder {

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  private final String pMacroName;
  private final MMacroBuilder mMacroBuilder = this;
  private final List<Object> ePublic = new LinkedList<Object>();
  private final List<Object> eContextParam = new LinkedList<Object>();
  private final List<Object> eContextBuildState = new LinkedList<Object>();
  private final List<Object> eNewBuildState = new LinkedList<Object>();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  private final List<Object> eStringPart_ParamInsertPart_EolPart_InsertMacroPart = new LinkedList<Object>();
  private final List<Object> eInitDirectivesCall = new LinkedList<Object>();
  private final List<Object> eInitInternalsCall = new LinkedList<Object>();

  public MMacroBuilder(String pMacroName) {
    if(pMacroName == null) throw new NullPointerException();
    this.pMacroName = pMacroName;
  }

  public MInitDirectivesCall newInitDirectivesCall(String pParamName) {
    MInitDirectivesCall lInitDirectivesCall = new MInitDirectivesCall(pParamName);
    this.eInitDirectivesCall.add(lInitDirectivesCall);
    return lInitDirectivesCall;
  }

  public MInitInternalsCall newInitInternalsCall(String pParamName) {
    MInitInternalsCall lInitInternalsCall = new MInitInternalsCall(pParamName);
    this.eInitInternalsCall.add(lInitInternalsCall);
    return lInitInternalsCall;
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
  private final String pMacroName;
  private final MMacroBuilder mMacroBuilder = this;
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
  private final List<Object> ePublic = new LinkedList<Object>();
  private final List<Object> eContextParam = new LinkedList<Object>();
  private final List<Object> eContextBuildState = new LinkedList<Object>();
  private final List<Object> eNewBuildState = new LinkedList<Object>();
  private final List<Object> eInitInternalsCall = new LinkedList<Object>();
=======
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
  private final List<Object> eStringPart_ParamInsertPart_EolPart_InsertMacroPart = new LinkedList<Object>();
  private final List<Object> eInitDirectivesCall = new LinkedList<Object>();
  private final List<Object> eInitInternalsCall = new LinkedList<Object>();

<<<<<<< HEAD
  public MMacroBuilder() {
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
  public MMacroBuilder(String pMacroName) {
    if(pMacroName == null) throw new NullPointerException();
    this.pMacroName = pMacroName;
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
  }

  public MInitDirectivesCall newInitDirectivesCall(String pParamName) {
    MInitDirectivesCall lInitDirectivesCall = new MInitDirectivesCall(pParamName);
    this.eInitDirectivesCall.add(lInitDirectivesCall);
    return lInitDirectivesCall;
  }

  public MInitInternalsCall newInitInternalsCall(String pParamName) {
    MInitInternalsCall lInitInternalsCall = new MInitInternalsCall(pParamName);
    this.eInitInternalsCall.add(lInitInternalsCall);
    return lInitInternalsCall;
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  }

  public MPublic newPublic() {
    MPublic lPublic = new MPublic();
    this.ePublic.add(lPublic);
    return lPublic;
  }

  public MContextParam newContextParam() {
    MContextParam lContextParam = new MContextParam();
    this.eContextParam.add(lContextParam);
    return lContextParam;
  }

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  public MContextBuildState newContextBuildState() {
    MContextBuildState lContextBuildState = new MContextBuildState();
    this.eContextBuildState.add(lContextBuildState);
    return lContextBuildState;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  }

  public MNewBuildState newNewBuildState() {
    MNewBuildState lNewBuildState = new MNewBuildState();
    this.eNewBuildState.add(lNewBuildState);
    return lNewBuildState;
=======
  public MContextExpansion newContextExpansion() {
    MContextExpansion lContextExpansion = new MContextExpansion();
    this.eContextExpansion.add(lContextExpansion);
    return lContextExpansion;
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  }

  public MNewBuildState newNewBuildState() {
    MNewBuildState lNewBuildState = new MNewBuildState();
    this.eNewBuildState.add(lNewBuildState);
    return lNewBuildState;
  }

  public MStringPart newStringPart(String pString, String pIndexBuilder) {
    MStringPart lStringPart = new MStringPart(pString, pIndexBuilder);
    this.eStringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lStringPart);
    return lStringPart;
  }

  public MParamInsertPart newParamInsertPart(String pParamName, String pIndexBuilder) {
    MParamInsertPart lParamInsertPart = new MParamInsertPart(pParamName, pIndexBuilder);
    this.eStringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lParamInsertPart);
    return lParamInsertPart;
  }

  public MEolPart newEolPart(String pIndexBuilder) {
    MEolPart lEolPart = new MEolPart(pIndexBuilder);
    this.eStringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lEolPart);
    return lEolPart;
  }

  public MInsertMacroPart newInsertMacroPart(String pName, String pIndexBuilder, String pIndexInsert) {
    MInsertMacroPart lInsertMacroPart = new MInsertMacroPart(pName, pIndexBuilder, pIndexInsert);
    this.eStringPart_ParamInsertPart_EolPart_InsertMacroPart.add(lInsertMacroPart);
    return lInsertMacroPart;
  }

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  String pMacroName() {
    return this.pMacroName;
  }

  private String rMacroName() {
    return this.mMacroBuilder.pMacroName();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
  public MNewContextExpansion newNewContextExpansion() {
    MNewContextExpansion lNewContextExpansion = new MNewContextExpansion();
    this.eNewContextExpansion.add(lNewContextExpansion);
    return lNewContextExpansion;
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("    @Override");
    sb.append(System.getProperty("line.separator"));
    sb.append("    ");
    for(Object oPublic : this.ePublic) {
      sb.append(oPublic.toString());
    }
    sb.append(" String build(");
    for(Object oContextParam : this.eContextParam) {
      sb.append(oContextParam.toString());
    }
    sb.append("){");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append("        BuildState buildState = ");
    if(this.eContextBuildState.size() == 0) {
      sb.append("this.build_state");
    }
    for(Object oContextBuildState : this.eContextBuildState) {
      sb.append(oContextBuildState.toString());
<<<<<<< HEAD
<<<<<<< HEAD
=======
    sb.append("        String local_expansion = ");
    if(this.eContextExpansion.size() == 0) {
      sb.append("this.expansion");
    }
    for(Object oContextExpansion : this.eContextExpansion) {
      sb.append(oContextExpansion.toString());
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    }
    sb.append(";");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append("        if(buildState == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            buildState = new BuildState();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        else if(buildState.getExpansion() == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            throw ObjectMacroException.cyclicReference(\"");
    sb.append(rMacroName());
    sb.append("\");");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        else{");
    sb.append(System.getProperty("line.separator"));
    sb.append("            return buildState.getExpansion();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        ");
    if(this.eNewBuildState.size() == 0) {
      sb.append("this.build_state = buildState");
    }
    for(Object oNewBuildState : this.eNewBuildState) {
      sb.append(oNewBuildState.toString());
<<<<<<< HEAD
=======
    sb.append("        BuildState buildState = ");
    if(this.eContextBuildState.size() == 0) {
      sb.append("this.build_state");
=======
=======
>>>>>>> object-macro2.1
import java.util.*;

public class MMacroBuilder extends Macro{

    private String field_MacroName;
    private final List<Macro> list_ListContextParam;
    private DSeparator ListContextParamSeparator;

    private DBeforeFirst ListContextParamBeforeFirst;

    private DAfterLast ListContextParamAfterLast;

    private DNone ListContextParamNone;
    private final InternalValue ListContextParamValue;
    private final List<Macro> list_ContextBuildState;
    private DSeparator ContextBuildStateSeparator;

    private DBeforeFirst ContextBuildStateBeforeFirst;

    private DAfterLast ContextBuildStateAfterLast;

    private DNone ContextBuildStateNone;
    private final InternalValue ContextBuildStateValue;
    private final List<Macro> list_NewBuildState;
    private DSeparator NewBuildStateSeparator;

    private DBeforeFirst NewBuildStateBeforeFirst;

    private DAfterLast NewBuildStateAfterLast;

    private DNone NewBuildStateNone;
    private final InternalValue NewBuildStateValue;
    private final List<Macro> list_InitDirectiveCall;
    private DSeparator InitDirectiveCallSeparator;

    private DBeforeFirst InitDirectiveCallBeforeFirst;

    private DAfterLast InitDirectiveCallAfterLast;

    private DNone InitDirectiveCallNone;
    private final InternalValue InitDirectiveCallValue;
    private final List<Macro> list_InitInternalsCall;
    private DSeparator InitInternalsCallSeparator;

    private DBeforeFirst InitInternalsCallBeforeFirst;

    private DAfterLast InitInternalsCallAfterLast;

    private DNone InitInternalsCallNone;
    private final InternalValue InitInternalsCallValue;
    private final List<Macro> list_ListPart;
    private DSeparator ListPartSeparator;

    private DBeforeFirst ListPartBeforeFirst;

    private DAfterLast ListPartAfterLast;

    private DNone ListPartNone;
    private final InternalValue ListPartValue;

    private final Context ListContextParamContext = new Context();    private final Context ContextBuildStateContext = new Context();    private final Context NewBuildStateContext = new Context();    private final Context InitDirectiveCallContext = new Context();    private final Context InitInternalsCallContext = new Context();    private final Context ListPartContext = new Context();

    public MMacroBuilder(String pMacroName){

        this.setPMacroName(pMacroName);

    this.list_ListContextParam = new ArrayList<>();    this.list_ContextBuildState = new ArrayList<>();    this.list_NewBuildState = new ArrayList<>();    this.list_InitDirectiveCall = new ArrayList<>();    this.list_InitInternalsCall = new ArrayList<>();    this.list_ListPart = new ArrayList<>();

    this.ListContextParamValue = new InternalValue(this.list_ListContextParam, this.ListContextParamContext);    this.ContextBuildStateValue = new InternalValue(this.list_ContextBuildState, this.ContextBuildStateContext);    this.NewBuildStateValue = new InternalValue(this.list_NewBuildState, this.NewBuildStateContext);    this.InitDirectiveCallValue = new InternalValue(this.list_InitDirectiveCall, this.InitDirectiveCallContext);    this.InitInternalsCallValue = new InternalValue(this.list_InitInternalsCall, this.InitInternalsCallContext);    this.ListPartValue = new InternalValue(this.list_ListPart, this.ListPartContext);
    }

    private void setPMacroName( String pMacroName ){
        if(pMacroName == null){
            throw ObjectMacroException.parameterNull("MacroName");
        }

        this.field_MacroName = pMacroName;
    }
    public void addListContextParam(MContextParam macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListContextParam");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("ContextParam");
        }

        this.list_ListContextParam.add(macro);
    }
    public void addContextBuildState(MContextBuildState macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ContextBuildState");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("ContextBuildState");
        }

        this.list_ContextBuildState.add(macro);
    }
    public void addNewBuildState(MNewBuildState macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("NewBuildState");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("NewBuildState");
        }

        this.list_NewBuildState.add(macro);
    }
    public void addInitDirectiveCall(MInitDirectiveCall macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InitDirectiveCall");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("InitDirectiveCall");
        }

        this.list_InitDirectiveCall.add(macro);
    }
    public void addInitInternalsCall(MInitInternalsCall macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InitInternalsCall");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("InitInternalsCall");
        }

        this.list_InitInternalsCall.add(macro);
    }
    public void addListPart(MStringPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListPart");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("StringPart");
        }

        this.list_ListPart.add(macro);
    }
    public void addListPart(MParamInsertPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListPart");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("ParamInsertPart");
        }

        this.list_ListPart.add(macro);
    }
    public void addListPart(MEolPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListPart");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("EolPart");
        }

        this.list_ListPart.add(macro);
    }
    public void addListPart(MInsertMacroPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListPart");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("InsertMacroPart");
        }

        this.list_ListPart.add(macro);
    }

    private String buildMacroName(){

        return this.field_MacroName;
    }
    private String buildListContextParam(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ListContextParamContext;
        List<Macro> macros = this.list_ListContextParam;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ListContextParamNone != null){
            sb.append(this.ListContextParamNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ListContextParamBeforeFirst != null){
                expansion = this.ListContextParamBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ListContextParamAfterLast != null){
                expansion = this.ListContextParamAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ListContextParamSeparator != null){
                expansion = this.ListContextParamSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }
    private String buildContextBuildState(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ContextBuildStateContext;
        List<Macro> macros = this.list_ContextBuildState;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ContextBuildStateNone != null){
            sb.append(this.ContextBuildStateNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ContextBuildStateBeforeFirst != null){
                expansion = this.ContextBuildStateBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ContextBuildStateAfterLast != null){
                expansion = this.ContextBuildStateAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ContextBuildStateSeparator != null){
                expansion = this.ContextBuildStateSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }
    private String buildNewBuildState(){
        StringBuilder sb = new StringBuilder();
        Context local_context = NewBuildStateContext;
        List<Macro> macros = this.list_NewBuildState;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.NewBuildStateNone != null){
            sb.append(this.NewBuildStateNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.NewBuildStateBeforeFirst != null){
                expansion = this.NewBuildStateBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.NewBuildStateAfterLast != null){
                expansion = this.NewBuildStateAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.NewBuildStateSeparator != null){
                expansion = this.NewBuildStateSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }
    private String buildInitDirectiveCall(){
        StringBuilder sb = new StringBuilder();
        Context local_context = InitDirectiveCallContext;
        List<Macro> macros = this.list_InitDirectiveCall;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.InitDirectiveCallNone != null){
            sb.append(this.InitDirectiveCallNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.InitDirectiveCallBeforeFirst != null){
                expansion = this.InitDirectiveCallBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.InitDirectiveCallAfterLast != null){
                expansion = this.InitDirectiveCallAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.InitDirectiveCallSeparator != null){
                expansion = this.InitDirectiveCallSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }
    private String buildInitInternalsCall(){
        StringBuilder sb = new StringBuilder();
        Context local_context = InitInternalsCallContext;
        List<Macro> macros = this.list_InitInternalsCall;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.InitInternalsCallNone != null){
            sb.append(this.InitInternalsCallNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.InitInternalsCallBeforeFirst != null){
                expansion = this.InitInternalsCallBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.InitInternalsCallAfterLast != null){
                expansion = this.InitInternalsCallAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.InitInternalsCallSeparator != null){
                expansion = this.InitInternalsCallSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }
    private String buildListPart(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ListPartContext;
        List<Macro> macros = this.list_ListPart;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ListPartNone != null){
            sb.append(this.ListPartNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ListPartBeforeFirst != null){
                expansion = this.ListPartBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ListPartAfterLast != null){
                expansion = this.ListPartAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ListPartSeparator != null){
                expansion = this.ListPartSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
<<<<<<< HEAD
>>>>>>> Mise à jour Visiteur - Build OK
    }
    for(Object oContextBuildState : this.eContextBuildState) {
      sb.append(oContextBuildState.toString());
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    }
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append(";");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append("        ");
    for(Object oInitDirectivesCall : this.eInitDirectivesCall) {
      sb.append(oInitDirectivesCall.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("        ");
    for(Object oInitInternalsCall : this.eInitInternalsCall) {
      sb.append(oInitInternalsCall.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("        StringBuilder sb0 = new StringBuilder();");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    for(Object oStringPart_ParamInsertPart_EolPart_InsertMacroPart : this.eStringPart_ParamInsertPart_EolPart_InsertMacroPart) {
      sb.append(oStringPart_ParamInsertPart_EolPart_InsertMacroPart.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("        buildState.setExpansion(sb0.toString());");
    sb.append(System.getProperty("line.separator"));
    sb.append("        return sb0.toString();");
<<<<<<< HEAD
=======
    sb.append("        if(local_expansion != null){");
=======
    sb.append("        if(buildState == null){");
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
=======
    sb.append("        if(buildState == null){");
>>>>>>> Revert "Changement Objectmacro-back"
    sb.append(System.getProperty("line.separator"));
    sb.append("            buildState = new BuildState();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        else if(buildState.getExpansion() == null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            throw ObjectMacroException.cyclicReference(\"");
    sb.append(rMacroName());
    sb.append("\");");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        else{");
    sb.append(System.getProperty("line.separator"));
    sb.append("            return buildState.getExpansion();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append("        ");
    if(this.eNewBuildState.size() == 0) {
      sb.append("this.build_state = buildState");
    }
    for(Object oNewBuildState : this.eNewBuildState) {
      sb.append(oNewBuildState.toString());
    }
    sb.append(";");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        ");
    for(Object oInitDirectivesCall : this.eInitDirectivesCall) {
      sb.append(oInitDirectivesCall.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("        ");
    for(Object oInitInternalsCall : this.eInitInternalsCall) {
      sb.append(oInitInternalsCall.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("        StringBuilder sb0 = new StringBuilder();");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    for(Object oStringPart_ParamInsertPart_EolPart_InsertMacroPart : this.eStringPart_ParamInsertPart_EolPart_InsertMacroPart) {
      sb.append(oStringPart_ParamInsertPart_EolPart_InsertMacroPart.toString());
=======

=======
>>>>>>> Correctifs objectmacro2-java(back)
=======
    }

    private String getMacroName(){

        return this.field_MacroName;
    }
>>>>>>> object-macro2.1
    private InternalValue getListContextParam(){
        return this.ListContextParamValue;
    }
    private InternalValue getContextBuildState(){
        return this.ContextBuildStateValue;
    }
    private InternalValue getNewBuildState(){
        return this.NewBuildStateValue;
    }
    private InternalValue getInitDirectiveCall(){
        return this.InitDirectiveCallValue;
    }
    private InternalValue getInitInternalsCall(){
        return this.InitInternalsCallValue;
    }
    private InternalValue getListPart(){
        return this.ListPartValue;
    }
    private void initListContextParamInternals(Context context){
        for(Macro macro : this.list_ListContextParam){
            macro.apply(new InternalsInitializer("ListContextParam"){
@Override
void setContextParam(MContextParam mContextParam){

    
    
}
});
        }
    }
    private void initContextBuildStateInternals(Context context){
        for(Macro macro : this.list_ContextBuildState){
            macro.apply(new InternalsInitializer("ContextBuildState"){
@Override
void setContextBuildState(MContextBuildState mContextBuildState){

    
    
}
});
        }
    }
    private void initNewBuildStateInternals(Context context){
        for(Macro macro : this.list_NewBuildState){
            macro.apply(new InternalsInitializer("NewBuildState"){
@Override
void setNewBuildState(MNewBuildState mNewBuildState){

    
    
}
});
        }
    }
    private void initInitDirectiveCallInternals(Context context){
        for(Macro macro : this.list_InitDirectiveCall){
            macro.apply(new InternalsInitializer("InitDirectiveCall"){
@Override
void setInitDirectiveCall(MInitDirectiveCall mInitDirectiveCall){

    
    
}
});
        }
    }
    private void initInitInternalsCallInternals(Context context){
        for(Macro macro : this.list_InitInternalsCall){
            macro.apply(new InternalsInitializer("InitInternalsCall"){
@Override
void setInitInternalsCall(MInitInternalsCall mInitInternalsCall){

    
    
}
});
        }
    }
    private void initListPartInternals(Context context){
        for(Macro macro : this.list_ListPart){
            macro.apply(new InternalsInitializer("ListPart"){
@Override
void setStringPart(MStringPart mStringPart){

    
    
}@Override
void setParamInsertPart(MParamInsertPart mParamInsertPart){

    
    
}@Override
void setEolPart(MEolPart mEolPart){

    
    
}@Override
void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){

    
    
}
});
        }
    }

    private void initListContextParamDirectives(){
        
    }
    private void initContextBuildStateDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append("this.build_state");
this.ContextBuildStateNone = new DNone(sb0.toString());
this.ContextBuildStateValue.setNone(this.ContextBuildStateNone);
    }
    private void initNewBuildStateDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append("this.build_state = buildState");
this.NewBuildStateNone = new DNone(sb0.toString());
this.NewBuildStateValue.setNone(this.NewBuildStateNone);
    }
    private void initInitDirectiveCallDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
this.InitDirectiveCallSeparator = new DSeparator(sb0.toString());
this.InitDirectiveCallValue.setSeparator(this.InitDirectiveCallSeparator);
    }
    private void initInitInternalsCallDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
this.InitInternalsCallSeparator = new DSeparator(sb0.toString());
this.InitInternalsCallValue.setSeparator(this.InitInternalsCallSeparator);
    }
    private void initListPartDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
this.ListPartSeparator = new DSeparator(sb0.toString());
this.ListPartValue.setSeparator(this.ListPartSeparator);
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setMacroBuilder(this);
    }

   @Override
    public String build(){

        BuildState buildState = this.build_state;

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("MacroBuilder");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;

        initListContextParamDirectives();
initContextBuildStateDirectives();
initNewBuildStateDirectives();
initInitDirectiveCallDirectives();
initInitInternalsCallDirectives();
initListPartDirectives();

        initListContextParamInternals(null);
initContextBuildStateInternals(null);
initNewBuildStateInternals(null);
initInitDirectiveCallInternals(null);
initInitInternalsCallInternals(null);
initListPartInternals(null);

        StringBuilder sb0 = new StringBuilder();

        sb0.append("   @Override");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        MPublic minsert_1 = new MPublic();
        
        
        sb0.append(minsert_1.build(null));
        sb0.append(" String build(");
        sb0.append(buildListContextParam());
        sb0.append(")");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        BuildState buildState = ");
        sb0.append(buildContextBuildState());
        sb0.append(";");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(buildState == null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            buildState = new BuildState();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        else if(buildState.getExpansion() == null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            throw ObjectMacroException.cyclicReference(\"");
        sb0.append(buildMacroName());
        sb0.append("\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        else");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            return buildState.getExpansion();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append(buildNewBuildState());
        sb0.append(";");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append(buildInitDirectiveCall());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append(buildInitInternalsCall());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        StringBuilder sb0 = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListPart());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        buildState.setExpansion(sb0.toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return sb0.toString();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
<<<<<<< HEAD
>>>>>>> Mise à jour Visiteur - Build OK
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("        buildState.setExpansion(sb0.toString());");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append("        return local_expansion;");
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    sb.append("        return sb0.toString();");
>>>>>>> Add BuildState class in order to do a cheap cycle verification on build method
=======
    sb.append("        return sb0.toString();");
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======
public class MMacroBuilder extends Macro{
>>>>>>> Changement Objectmacro-back
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
public class MMacroBuilder extends Macro{
>>>>>>> MaJ Fichier de Macro + Generation
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"

<<<<<<< HEAD
}
=======
=======
    }

>>>>>>> object-macro2.1
    @Override
    String build(Context context) {
        return build();
    }
<<<<<<< HEAD
}
>>>>>>> Correctifs objectmacro2-java(back)
=======
}
>>>>>>> object-macro2.1
