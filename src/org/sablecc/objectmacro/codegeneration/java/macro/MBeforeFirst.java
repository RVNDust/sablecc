/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

public class MBeforeFirst extends Macro{

    private Macro list_ListPart[];

    private final Context ListPartContext = new Context();

    public MBeforeFirst(Macro pListPart[]){

        this.setPListPart(pListPart);
    }

    private void setPListPart(Macro pListPart[]){
        if(pListPart == null){
            throw ObjectMacroException.parameterNull("ListPart");
        }

        Macro macros[] = pListPart;
        this.list_ListPart = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListPart");
            }

            macro.apply(new InternalsInitializer("ListPart"){
@Override
void setStringPart(MStringPart mStringPart){

        }
@Override
void setParamInsertPart(MParamInsertPart mParamInsertPart){

        }
@Override
void setEolPart(MEolPart mEolPart){

        }
@Override
void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){

        }
});

            this.list_ListPart[i++] = macro;

        }
    }

    private String buildListPart(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListPartContext;
        Macro macros[] = this.list_ListPart;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private Macro[] getListPart(){

        return this.list_ListPart;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setBeforeFirst(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append("if(first)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append(buildListPart());
        sb0.append(LINE_SEPARATOR);
        sb0.append("    first = false;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
