/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
<<<<<<< HEAD
public class MParamMacroRef {

  private final String pName;
  private final MParamMacroRef mParamMacroRef = this;

  public MParamMacroRef(String pName) {
    if(pName == null) throw new NullPointerException();
    this.pName = pName;
=======
import java.util.*;

=======
>>>>>>> Add structure which contains list of macros and the context associated
public class MParamMacroRef {

  private final String pName;
  private final MParamMacroRef mParamMacroRef = this;

  public MParamMacroRef(String pName) {
    if(pName == null) throw new NullPointerException();
    this.pName = pName;
  }

<<<<<<< HEAD
  public MContextParam newContextParam() {
    MContextParam lContextParam = new MContextParam();
    this.eContextParam.add(lContextParam);
    return lContextParam;
  }

  public MGetInternalTail newGetInternalTail() {
    MGetInternalTail lGetInternalTail = new MGetInternalTail();
    this.eGetInternalTail.add(lGetInternalTail);
    return lGetInternalTail;
  }

<<<<<<< HEAD
  public MNone newNone() {
    MNone lNone = new MNone();
    this.eNone.add(lNone);
    return lNone;
  }

  public MBeforeFirst newBeforeFirst() {
    MBeforeFirst lBeforeFirst = new MBeforeFirst();
    this.eBeforeFirst.add(lBeforeFirst);
    return lBeforeFirst;
  }

  public MSeparator newSeparator() {
    MSeparator lSeparator = new MSeparator();
    this.eSeparator.add(lSeparator);
    return lSeparator;
  }

  public MAfterLast newAfterLast() {
    MAfterLast lAfterLast = new MAfterLast();
    this.eAfterLast.add(lAfterLast);
    return lAfterLast;
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
  }

=======
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
=======
>>>>>>> Add structure which contains list of macros and the context associated
  String pName() {
    return this.pName;
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
  String pIndexBuilder() {
    return this.pIndexBuilder;
  }

>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
  private String rName() {
    return this.mParamMacroRef.pName();
  }

<<<<<<< HEAD
<<<<<<< HEAD
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("    private InternalValue get");
    sb.append(rName());
    sb.append("(){");
    sb.append(System.getProperty("line.separator"));
    sb.append("        return this.");
    sb.append(rName());
    sb.append("Value;");
=======
  private String rIndexBuilder() {
    return this.mParamMacroRef.pIndexBuilder();
  }

=======
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("    private InternalValue get");
    sb.append(rName());
    sb.append("(){");
    sb.append(System.getProperty("line.separator"));
    sb.append("        return this.");
    sb.append(rName());
    sb.append("Value;");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
    sb.append("        ");
    for(Object oNone : this.eNone) {
      sb.append(oNone.toString());
    }
    sb.append("        boolean first = true;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        int i = 0;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        for(Macro macro : macros){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            ");
    for(Object oBeforeFirst : this.eBeforeFirst) {
      sb.append(oBeforeFirst.toString());
    }
    sb.append("            ");
    for(Object oSeparator : this.eSeparator) {
      sb.append(oSeparator.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("            sb");
    sb.append(rIndexBuilder());
    sb.append(".append(macro.build(local_context));");
    sb.append(System.getProperty("line.separator"));
    sb.append("            i++;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            ");
    for(Object oAfterLast : this.eAfterLast) {
      sb.append(oAfterLast.toString());
    }
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        return sb");
    sb.append(rIndexBuilder());
    sb.append(".toString();");
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
    sb.append(System.getProperty("line.separator"));
=======
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

}
