/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
import java.util.*;

public class MParamMacroRefBuilder {

  private final String pName;
<<<<<<< HEAD
<<<<<<< HEAD
  private final MParamMacroRefBuilder mParamMacroRefBuilder = this;
<<<<<<< HEAD
<<<<<<< HEAD
  private final List<Object> eContextName = new LinkedList<Object>();
<<<<<<< HEAD
  private final List<Object> eApplyNoneDirective = new LinkedList<Object>();
=======
  private final List<Object> eContextParam = new LinkedList<Object>();
=======
>>>>>>> Add structure which contains list of macros and the context associated
  private final List<Object> eContextName = new LinkedList<Object>();
<<<<<<< HEAD
  private final List<Object> eNone = new LinkedList<Object>();
  private final List<Object> eBeforeFirst = new LinkedList<Object>();
  private final List<Object> eSeparator = new LinkedList<Object>();
  private final List<Object> eAfterLast = new LinkedList<Object>();
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
=======
  private final List<Object> eApplyNoneDirective = new LinkedList<Object>();
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
>>>>>>> Remove abstraction on directives when building a macro or a parameter
=======
  private final MParamMacroRefBuilder mParamMacroRefBuilder = this;
  private final List<Object> eContextName = new LinkedList<Object>();
>>>>>>> Revert "MaJ Fichier de Macro + Generation"

  public MParamMacroRefBuilder(String pName) {
    if(pName == null) throw new NullPointerException();
    this.pName = pName;
<<<<<<< HEAD
<<<<<<< HEAD
=======
  private final String pIndexBuilder;
  private final MParamMacroRefBuilder mParamMacroRefBuilder = this;
  private final List<Object> eContextName = new LinkedList<Object>();
  private final List<Object> eApplyNoneDirective = new LinkedList<Object>();

  public MParamMacroRefBuilder(String pName, String pIndexBuilder) {
    if(pName == null) throw new NullPointerException();
    this.pName = pName;
>>>>>>> Revert "Changement Objectmacro-back"
    if(pIndexBuilder == null) throw new NullPointerException();
    this.pIndexBuilder = pIndexBuilder;
  }

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
>>>>>>> Revert "Changement Objectmacro-back"
  public MApplyNoneDirective newApplyNoneDirective() {
    MApplyNoneDirective lApplyNoneDirective = new MApplyNoneDirective(mParamMacroRefBuilder);
    this.eApplyNoneDirective.add(lApplyNoneDirective);
    return lApplyNoneDirective;
<<<<<<< HEAD
<<<<<<< HEAD
=======
  public MContextParam newContextParam() {
    MContextParam lContextParam = new MContextParam();
    this.eContextParam.add(lContextParam);
    return lContextParam;
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
  }

=======
>>>>>>> Add structure which contains list of macros and the context associated
=======
=======
>>>>>>> Remove abstraction on directives when building a macro or a parameter
  }

>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
  }

>>>>>>> Revert "Changement Objectmacro-back"
=======
  }

>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  public MContextName newContextName(String pContextName) {
    MContextName lContextName = new MContextName(pContextName);
    this.eContextName.add(lContextName);
    return lContextName;
  }

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
  public MGetInternalTail newGetInternalTail() {
    MGetInternalTail lGetInternalTail = new MGetInternalTail();
    this.eGetInternalTail.add(lGetInternalTail);
    return lGetInternalTail;
  }

=======
>>>>>>> Add structure which contains list of macros and the context associated
  public MNone newNone() {
    MNone lNone = new MNone();
    this.eNone.add(lNone);
    return lNone;
  }

  public MBeforeFirst newBeforeFirst() {
    MBeforeFirst lBeforeFirst = new MBeforeFirst();
    this.eBeforeFirst.add(lBeforeFirst);
    return lBeforeFirst;
  }

  public MSeparator newSeparator() {
    MSeparator lSeparator = new MSeparator();
    this.eSeparator.add(lSeparator);
    return lSeparator;
  }

  public MAfterLast newAfterLast() {
    MAfterLast lAfterLast = new MAfterLast();
    this.eAfterLast.add(lAfterLast);
    return lAfterLast;
  }

>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
=======
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  String pName() {
    return this.pName;
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
  String pIndexBuilder() {
    return this.pIndexBuilder;
  }

>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  private String rName() {
    return this.mParamMacroRefBuilder.pName();
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
  private String rIndexBuilder() {
    return this.mParamMacroRefBuilder.pIndexBuilder();
  }

>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("    private String build");
    sb.append(rName());
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append("(){");
=======
    sb.append("(");
    for(Object oContextParam : this.eContextParam) {
      sb.append(oContextParam.toString());
    }
    sb.append("){");
=======
    sb.append("(){");
>>>>>>> Add structure which contains list of macros and the context associated
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
    sb.append(System.getProperty("line.separator"));
=======
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
    sb.append("        StringBuilder sb");
    sb.append(rIndexBuilder());
    sb.append(" = new StringBuilder();");
=======
    sb.append("        StringBuilder sb = new StringBuilder();");
>>>>>>> Remove abstraction on directives when building a macro or a parameter
=======
    sb.append("(){");
    sb.append(System.getProperty("line.separator"));
    sb.append("        StringBuilder sb");
    sb.append(rIndexBuilder());
    sb.append(" = new StringBuilder();");
>>>>>>> Revert "Changement Objectmacro-back"
=======
    sb.append("(){");
    sb.append(System.getProperty("line.separator"));
    sb.append("        StringBuilder sb = new StringBuilder();");
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append(System.getProperty("line.separator"));
    sb.append("        Context local_context = ");
    if(this.eContextName.size() == 0) {
      sb.append("context");
<<<<<<< HEAD
=======
public class MParamMacroRefBuilder extends Macro{

    private String field_Name;

    private Macro list_ContextName[];

    private final Context ContextNameContext = new Context();

    public MParamMacroRefBuilder(String pName, Macro pContextName[]){

        this.setPName(pName);
        this.setPContextName(pContextName);
    }

    private void setPName(String pName){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }

        this.field_Name = pName;
    }

    private void setPContextName(Macro pContextName[]){
        if(pContextName == null){
            throw ObjectMacroException.parameterNull("ContextName");
        }

        Macro macros[] = pContextName;
        this.list_ContextName = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ContextName");
            }

            macro.apply(new InternalsInitializer("ContextName"){
@Override
void setContextName(MContextName mContextName){

        }
});

            this.list_ContextName[i++] = macro;

        }
    }

    private String buildName(){

        return this.field_Name;
    }

    private String buildContextName(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ContextNameContext;
        Macro macros[] = this.list_ContextName;
        if(macros.length == 0){
            sb0.append("context");
}
        boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
>>>>>>> MaJ Fichier de Macro + Generation
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    }
    for(Object oContextName : this.eContextName) {
      sb.append(oContextName.toString());
    }
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append(";");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
    sb.append(";");
    sb.append(System.getProperty("line.separator"));
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append("        List<Macro> macros = this.list_");
    sb.append(rName());
    sb.append(";");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        int i = 0;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        int nb_macros = macros.size();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        String expansion = null;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
    sb.append("        ");
    for(Object oApplyNoneDirective : this.eApplyNoneDirective) {
      sb.append(oApplyNoneDirective.toString());
    }
    sb.append(System.getProperty("line.separator"));
    sb.append("        for(Macro macro : macros){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            expansion = macro.build(local_context);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            for(Directive directive : this.");
    sb.append(rName());
    sb.append("Directives){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                expansion = directive.apply(i, expansion, nb_macros);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            sb");
    sb.append(rIndexBuilder());
    sb.append(".append(expansion);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            i++;");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
=======
    sb.append("        Macro macros[] = this.list_");
=======
    sb.append("        List<Macro> macros = this.list_");
>>>>>>> Removed in constructor initialization and add lazy initialization
    sb.append(rName());
    sb.append(";");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        int i = 0;");
    sb.append(System.getProperty("line.separator"));
    sb.append("        int nb_macros = macros.size();");
    sb.append(System.getProperty("line.separator"));
    sb.append("        String expansion = null;");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append("        if(this.");
    sb.append(rName());
    sb.append("None != null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            sb.append(this.");
    sb.append(rName());
    sb.append("None.apply(i, \"\", nb_macros));");
    sb.append(System.getProperty("line.separator"));
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        for(Macro macro : macros){");
    sb.append(System.getProperty("line.separator"));
    sb.append("            expansion = macro.build(local_context);");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(this.");
    sb.append(rName());
    sb.append("BeforeFirst != null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                expansion = this.");
    sb.append(rName());
    sb.append("BeforeFirst.apply(i, expansion, nb_macros);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(this.");
    sb.append(rName());
    sb.append("AfterLast != null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                expansion = this.");
    sb.append(rName());
    sb.append("AfterLast.apply(i, expansion, nb_macros);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            if(this.");
    sb.append(rName());
    sb.append("Separator != null){");
    sb.append(System.getProperty("line.separator"));
    sb.append("                expansion = this.");
    sb.append(rName());
    sb.append("Separator.apply(i, expansion, nb_macros);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("            sb.append(expansion);");
    sb.append(System.getProperty("line.separator"));
    sb.append("            i++;");
    sb.append(System.getProperty("line.separator"));
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append(System.getProperty("line.separator"));
    sb.append("            ");
    for(Object oAfterLast : this.eAfterLast) {
      sb.append(oAfterLast.toString());
    }
>>>>>>> Allow to set internals with string and macro by adding a structure containing the macro and parameters and internals name
=======
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        return sb.toString();");
<<<<<<< HEAD
=======
    sb.append("        }");
    sb.append(System.getProperty("line.separator"));
    sb.append(System.getProperty("line.separator"));
    sb.append("        return sb");
    sb.append(rIndexBuilder());
    sb.append(".toString();");
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    sb.append(System.getProperty("line.separator"));
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
<<<<<<< HEAD
<<<<<<< HEAD
=======
public class MParamMacroRefBuilder extends Macro{
>>>>>>> Changement Objectmacro-back
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> MaJ Fichier de Macro + Generation
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"

}
