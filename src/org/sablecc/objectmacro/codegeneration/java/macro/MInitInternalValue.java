/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
public class MInitInternalValue {

  private final String pParamName;
  private final MInitInternalValue mInitInternalValue = this;

  public MInitInternalValue(String pParamName) {
    if(pParamName == null) throw new NullPointerException();
    this.pParamName = pParamName;
  }

  String pParamName() {
    return this.pParamName;
  }

  private String rParamName() {
    return this.mInitInternalValue.pParamName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("    this.");
    sb.append(rParamName());
    sb.append("Value = new InternalValue(this.list_");
    sb.append(rParamName());
<<<<<<< HEAD
<<<<<<< HEAD
    sb.append(", this.");
    sb.append(rParamName());
<<<<<<< HEAD
    sb.append("Context, this.");
    sb.append(rParamName());
    sb.append("Directives);");
=======
    sb.append(", ");
    sb.append(rParamName());
    sb.append("Context);");
>>>>>>> Add structure which contains list of macros and the context associated
=======
    sb.append(", this.");
    sb.append(rParamName());
    sb.append("Context, this.");
    sb.append(rParamName());
    sb.append("Directives);");
>>>>>>> Add directives into InternalValue and update directives in order to easily add new directives
=======
    sb.append("Context);");
>>>>>>> Remove abstraction on directives when building a macro or a parameter
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
=======
public class MInitInternalValue extends Macro{
>>>>>>> MaJ Fichier de Macro + Generation

    private String field_ParamName;

    public MInitInternalValue(String pParamName){

        this.setPParamName(pParamName);
    }

    private void setPParamName(String pParamName){
        if(pParamName == null){
            throw ObjectMacroException.parameterNull("ParamName");
        }

        this.field_ParamName = pParamName;
    }

    private String buildParamName(){

        return this.field_ParamName;
    }

    private String getParamName(){

        return this.field_ParamName;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setInitInternalValue(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append("    this.");
        sb0.append(buildParamName());
        sb0.append("Value = new InternalValue(this.list_");
        sb0.append(buildParamName());
        sb0.append(", this.");
        sb0.append(buildParamName());
        sb0.append("Context);");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
