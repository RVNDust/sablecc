/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
import java.util.*;

public class MConstructor {

  private final String pName;
  private final MConstructor mConstructor = this;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  private final List<Object> eStringParam = new LinkedList<Object>();
  private final List<Object> eSetParam = new LinkedList<Object>();
  private final List<Object> eInitMacroParam_InitMacroInternal_InitStringInternal = new LinkedList<Object>();
<<<<<<< HEAD
<<<<<<< HEAD
  private final List<Object> eInitInternalValue = new LinkedList<Object>();
=======
  private final List<Object> eStringParam_MacroParam = new LinkedList<Object>();
=======
  private final List<Object> eStringParam = new LinkedList<Object>();
>>>>>>> Removed in constructor initialization and add lazy initialization
  private final List<Object> eSetParam = new LinkedList<Object>();
  private final List<Object> eInitMacroInternal_InitStringInternal = new LinkedList<Object>();
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
>>>>>>> Init internals before building the macro instead at the add or addAll methods
=======
  private final List<Object> eInitInternalValue = new LinkedList<Object>();
>>>>>>> Add structure which contains list of macros and the context associated
=======
  private final List<Object> eStringParam = new LinkedList<Object>();
  private final List<Object> eSetParam = new LinkedList<Object>();
  private final List<Object> eInitMacroParam_InitMacroInternal_InitStringInternal = new LinkedList<Object>();
  private final List<Object> eInitInternalValue = new LinkedList<Object>();
>>>>>>> Revert "Changement Objectmacro-back"
=======
  private final List<Object> eStringParam = new LinkedList<Object>();
  private final List<Object> eSetParam = new LinkedList<Object>();
  private final List<Object> eInitMacroParam_InitMacroInternal_InitStringInternal = new LinkedList<Object>();
  private final List<Object> eInitInternalValue = new LinkedList<Object>();
>>>>>>> Revert "MaJ Fichier de Macro + Generation"

  public MConstructor(String pName) {
    if(pName == null) throw new NullPointerException();
    this.pName = pName;
  }

  public MStringParam newStringParam(String pName) {
    MStringParam lStringParam = new MStringParam(pName);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    this.eStringParam.add(lStringParam);
    return lStringParam;
  }

=======
    this.eStringParam_MacroParam.add(lStringParam);
    return lStringParam;
  }

  public MMacroParam newMacroParam(String pName) {
    MMacroParam lMacroParam = new MMacroParam(pName);
    this.eStringParam_MacroParam.add(lMacroParam);
    return lMacroParam;
  }

>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    this.eStringParam.add(lStringParam);
    return lStringParam;
  }

<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Removed in constructor initialization and add lazy initialization
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  public MSetParam newSetParam(String pName) {
    MSetParam lSetParam = new MSetParam(pName);
    this.eSetParam.add(lSetParam);
    return lSetParam;
  }

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Init internals before building the macro instead at the add or addAll methods
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  public MInitMacroParam newInitMacroParam(String pName) {
    MInitMacroParam lInitMacroParam = new MInitMacroParam(pName);
    this.eInitMacroParam_InitMacroInternal_InitStringInternal.add(lInitMacroParam);
    return lInitMacroParam;
  }

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  public MInitMacroInternal newInitMacroInternal(String pName) {
    MInitMacroInternal lInitMacroInternal = new MInitMacroInternal(pName);
    this.eInitMacroParam_InitMacroInternal_InitStringInternal.add(lInitMacroInternal);
=======
  public MInitMacroInternal newInitMacroInternal(String pName) {
    MInitMacroInternal lInitMacroInternal = new MInitMacroInternal(pName);
    this.eInitMacroInternal_InitStringInternal.add(lInitMacroInternal);
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
  public MInitMacroInternal newInitMacroInternal(String pName) {
    MInitMacroInternal lInitMacroInternal = new MInitMacroInternal(pName);
    this.eInitMacroParam_InitMacroInternal_InitStringInternal.add(lInitMacroInternal);
>>>>>>> Init internals before building the macro instead at the add or addAll methods
=======
  public MInitMacroInternal newInitMacroInternal(String pName) {
    MInitMacroInternal lInitMacroInternal = new MInitMacroInternal(pName);
    this.eInitMacroParam_InitMacroInternal_InitStringInternal.add(lInitMacroInternal);
>>>>>>> Revert "Changement Objectmacro-back"
=======
  public MInitMacroInternal newInitMacroInternal(String pName) {
    MInitMacroInternal lInitMacroInternal = new MInitMacroInternal(pName);
    this.eInitMacroParam_InitMacroInternal_InitStringInternal.add(lInitMacroInternal);
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    return lInitMacroInternal;
  }

  public MInitStringInternal newInitStringInternal(String pName) {
    MInitStringInternal lInitStringInternal = new MInitStringInternal(pName);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    this.eInitMacroParam_InitMacroInternal_InitStringInternal.add(lInitStringInternal);
    return lInitStringInternal;
  }

  public MInitInternalValue newInitInternalValue(String pParamName) {
    MInitInternalValue lInitInternalValue = new MInitInternalValue(pParamName);
    this.eInitInternalValue.add(lInitInternalValue);
    return lInitInternalValue;
  }

=======
    this.eInitMacroInternal_InitStringInternal.add(lInitStringInternal);
=======
    this.eInitMacroParam_InitMacroInternal_InitStringInternal.add(lInitStringInternal);
>>>>>>> Init internals before building the macro instead at the add or addAll methods
    return lInitStringInternal;
  }

<<<<<<< HEAD
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
=======
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
    this.eInitMacroParam_InitMacroInternal_InitStringInternal.add(lInitStringInternal);
    return lInitStringInternal;
  }

<<<<<<< HEAD
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  public MInitInternalValue newInitInternalValue(String pParamName) {
    MInitInternalValue lInitInternalValue = new MInitInternalValue(pParamName);
    this.eInitInternalValue.add(lInitInternalValue);
    return lInitInternalValue;
  }

<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> Add structure which contains list of macros and the context associated
=======
>>>>>>> Revert "Changement Objectmacro-back"
=======
>>>>>>> Revert "MaJ Fichier de Macro + Generation"
  String pName() {
    return this.pName;
  }

  private String rName() {
    return this.mConstructor.pName();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("    public M");
    sb.append(rName());
    sb.append("(");
    {
      boolean first = true;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      for(Object oStringParam : this.eStringParam) {
=======
      for(Object oStringParam_MacroParam : this.eStringParam_MacroParam) {
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
      for(Object oStringParam : this.eStringParam) {
>>>>>>> Removed in constructor initialization and add lazy initialization
        if(first) {
          first = false;
=======
=======
import java.util.*;

>>>>>>> Mise Ã  jour Visiteur - Build OK
public class MConstructor extends Macro{

    private String field_Name;

    private final List<Macro> list_ListSetParam;

    private DSeparator ListSetParamSeparator;

    private DBeforeFirst ListSetParamBeforeFirst;

    private DAfterLast ListSetParamAfterLast;

    private DNone ListSetParamNone;

    private final InternalValue ListSetParamValue;

    private final List<Macro> list_ListStringParam;

    private DSeparator ListStringParamSeparator;

    private DBeforeFirst ListStringParamBeforeFirst;

    private DAfterLast ListStringParamAfterLast;

    private DNone ListStringParamNone;

    private final InternalValue ListStringParamValue;

    private final List<Macro> list_ListInit;

<<<<<<< HEAD
    private Macro list_ListParam[];

    private Macro list_ListInternal[];

    private final Context ListSetParamContext = new Context();
    private final Context ListParamContext = new Context();
    private final Context ListInternalContext = new Context();

    public MConstructor(String pName, Macro pListSetParam[], Macro pListParam[], Macro pListInternal[]){

        this.setPName(pName);
        this.setPListSetParam(pListSetParam);
        this.setPListParam(pListParam);
        this.setPListInternal(pListInternal);
    }

    private void setPName(String pName){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
>>>>>>> Changement Objectmacro-back
=======
      for(Object oStringParam : this.eStringParam) {
        if(first) {
          first = false;
>>>>>>> Revert "Changement Objectmacro-back"
        }
        else {
          sb.append(", ");
        }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
        sb.append(oStringParam.toString());
=======
        sb.append(oStringParam_MacroParam.toString());
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
        sb.append(oStringParam.toString());
>>>>>>> Removed in constructor initialization and add lazy initialization
      }
=======
>>>>>>> Changement Objectmacro-back
=======
        sb.append(oStringParam.toString());
      }
>>>>>>> Revert "Changement Objectmacro-back"
    }
    sb.append("){");
    sb.append(System.getProperty("line.separator"));
    if(this.eSetParam.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oSetParam : this.eSetParam) {
      sb.append(oSetParam.toString());
    }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    if(this.eInitMacroParam_InitMacroInternal_InitStringInternal.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oInitMacroParam_InitMacroInternal_InitStringInternal : this.eInitMacroParam_InitMacroInternal_InitStringInternal) {
      sb.append(oInitMacroParam_InitMacroInternal_InitStringInternal.toString());
    }
    if(this.eInitInternalValue.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oInitInternalValue : this.eInitInternalValue) {
      sb.append(oInitInternalValue.toString());
=======
    if(this.eInitMacroInternal_InitStringInternal.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oInitMacroInternal_InitStringInternal : this.eInitMacroInternal_InitStringInternal) {
      sb.append(oInitMacroInternal_InitStringInternal.toString());
>>>>>>> Java code generation Objectmacro 2 using the lib ObjectMacro 1
=======
    if(this.eInitMacroParam_InitMacroInternal_InitStringInternal.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oInitMacroParam_InitMacroInternal_InitStringInternal : this.eInitMacroParam_InitMacroInternal_InitStringInternal) {
      sb.append(oInitMacroParam_InitMacroInternal_InitStringInternal.toString());
>>>>>>> Init internals before building the macro instead at the add or addAll methods
=======

    private String buildListParam(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListParamContext;
        Macro macros[] = this.list_ListParam;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        if(first) {
  first = false;
}
else {
           sb0.append(", ");
}

            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String buildListInternal(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListInternalContext;
        Macro macros[] = this.list_ListInternal;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
>>>>>>> Changement Objectmacro-back
=======
    if(this.eInitMacroParam_InitMacroInternal_InitStringInternal.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oInitMacroParam_InitMacroInternal_InitStringInternal : this.eInitMacroParam_InitMacroInternal_InitStringInternal) {
      sb.append(oInitMacroParam_InitMacroInternal_InitStringInternal.toString());
>>>>>>> Revert "Changement Objectmacro-back"
    }
    if(this.eInitInternalValue.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oInitInternalValue : this.eInitInternalValue) {
      sb.append(oInitInternalValue.toString());
    }
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }
=======
public class MConstructor extends Macro{
>>>>>>> MaJ Fichier de Macro + Generation

    private String field_Name;

    private Macro list_ListSetParam[];

    private Macro list_ListStringParam[];
=======
    private DSeparator ListInitSeparator;
>>>>>>> Mise Ã  jour Visiteur - Build OK

    private DBeforeFirst ListInitBeforeFirst;

    private DAfterLast ListInitAfterLast;

    private DNone ListInitNone;

    private final InternalValue ListInitValue;

    private final List<Macro> list_ListInternal;

    private DSeparator ListInternalSeparator;

    private DBeforeFirst ListInternalBeforeFirst;

    private DAfterLast ListInternalAfterLast;

    private DNone ListInternalNone;

    private final InternalValue ListInternalValue;

    private final Context ListSetParamContext = new Context();
    private final Context ListStringParamContext = new Context();
    private final Context ListInitContext = new Context();
    private final Context ListInternalContext = new Context();

    public MConstructor(String pName){

        this.setPName(pName);

    this.list_ListSetParam = new ArrayList<>();
    this.list_ListStringParam = new ArrayList<>();
    this.list_ListInit = new ArrayList<>();
    this.list_ListInternal = new ArrayList<>();

    this.ListSetParamValue = new InternalValue(this.list_ListSetParam, this.ListSetParamContext);
    this.ListStringParamValue = new InternalValue(this.list_ListStringParam, this.ListStringParamContext);
    this.ListInitValue = new InternalValue(this.list_ListInit, this.ListInitContext);
    this.ListInternalValue = new InternalValue(this.list_ListInternal, this.ListInternalContext);
    }

    private void setPName(String pName){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }

        this.field_Name = pName;
    }

    public void addListSetParam(MSetParam macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListSetParam");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("Constructor");
        }

        this.list_ListSetParam.add(macro);
    }

    public void addListStringParam(MStringParam macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListStringParam");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("Constructor");
        }

        this.list_ListStringParam.add(macro);
    }

    public void addListInit(MInitMacroParam macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListInit");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("Constructor");
        }

        this.list_ListInit.add(macro);
    }

    public void addListInit(MInitMacroInternal macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListInit");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("Constructor");
        }

        this.list_ListInit.add(macro);
    }

    public void addListInit(MInitStringInternal macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListInit");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("Constructor");
        }

        this.list_ListInit.add(macro);
    }

    public void addListInternal(MInitInternalValue macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListInternal");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("Constructor");
        }

        this.list_ListInternal.add(macro);
    }

    private String buildName(){

        return this.field_Name;
    }

    private String buildListSetParam(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ListSetParamContext;
        List<Macro> macros = this.list_ListSetParam;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ListSetParamNone != null){
            sb.append(this.ListSetParamNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ListSetParamBeforeFirst != null){
                expansion = this.ListSetParamBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ListSetParamAfterLast != null){
                expansion = this.ListSetParamAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ListSetParamSeparator != null){
                expansion = this.ListSetParamSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }

    private String buildListStringParam(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ListStringParamContext;
        List<Macro> macros = this.list_ListStringParam;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ListStringParamNone != null){
            sb.append(this.ListStringParamNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ListStringParamBeforeFirst != null){
                expansion = this.ListStringParamBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ListStringParamAfterLast != null){
                expansion = this.ListStringParamAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ListStringParamSeparator != null){
                expansion = this.ListStringParamSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }

    private String buildListInit(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ListInitContext;
        List<Macro> macros = this.list_ListInit;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ListInitNone != null){
            sb.append(this.ListInitNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ListInitBeforeFirst != null){
                expansion = this.ListInitBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ListInitAfterLast != null){
                expansion = this.ListInitAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ListInitSeparator != null){
                expansion = this.ListInitSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }

    private String buildListInternal(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ListInternalContext;
        List<Macro> macros = this.list_ListInternal;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ListInternalNone != null){
            sb.append(this.ListInternalNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ListInternalBeforeFirst != null){
                expansion = this.ListInternalBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ListInternalAfterLast != null){
                expansion = this.ListInternalAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ListInternalSeparator != null){
                expansion = this.ListInternalSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }

    private String getName(){

        return this.field_Name;
    }

    private InternalValue getListSetParam(){
        return this.ListSetParamValue;
    }

    private InternalValue getListStringParam(){
        return this.ListStringParamValue;
    }

    private InternalValue getListInit(){
        return this.ListInitValue;
    }

    private InternalValue getListInternal(){
        return this.ListInternalValue;
    }
    private void initListSetParamInternals(Context context){
        for(Macro macro : this.list_ListSetParam){
            macro.apply(new InternalsInitializer("ListSetParam"){
@Override
void setSetParam(MSetParam mSetParam){

        }
});
        }
    }

    private void initListStringParamInternals(Context context){
        for(Macro macro : this.list_ListStringParam){
            macro.apply(new InternalsInitializer("ListStringParam"){
@Override
void setStringParam(MStringParam mStringParam){

        }
});
        }
    }

    private void initListInitInternals(Context context){
        for(Macro macro : this.list_ListInit){
            macro.apply(new InternalsInitializer("ListInit"){
@Override
void setInitMacroParam(MInitMacroParam mInitMacroParam){

        }
@Override
void setInitMacroInternal(MInitMacroInternal mInitMacroInternal){

        }
@Override
void setInitStringInternal(MInitStringInternal mInitStringInternal){

        }
});
        }
    }

    private void initListInternalInternals(Context context){
        for(Macro macro : this.list_ListInternal){
            macro.apply(new InternalsInitializer("ListInternal"){
@Override
void setInitInternalValue(MInitInternalValue mInitInternalValue){

        }
});
        }
    }

    private void initListSetParamDirectives(){
        
        StringBuilder sb0 = new StringBuilder();
                sb0.append(LINE_SEPARATOR);
        this.ListSetParamBeforeFirst = new DBeforeFirst(sb0.toString());
        this.ListSetParamValue.setBeforeFirst(this.ListSetParamBeforeFirst);
            }

    private void initListStringParamDirectives(){
        
        StringBuilder sb0 = new StringBuilder();
                sb0.append(", ");
        this.ListStringParamSeparator = new DSeparator(sb0.toString());
        this.ListStringParamValue.setSeparator(this.ListStringParamSeparator);
            }

    private void initListInitDirectives(){
        
        StringBuilder sb0 = new StringBuilder();
                sb0.append(LINE_SEPARATOR);
        this.ListInitBeforeFirst = new DBeforeFirst(sb0.toString());
        this.ListInitValue.setBeforeFirst(this.ListInitBeforeFirst);
            }

    private void initListInternalDirectives(){
        
        StringBuilder sb0 = new StringBuilder();
                sb0.append(LINE_SEPARATOR);
        this.ListInternalBeforeFirst = new DBeforeFirst(sb0.toString());
        this.ListInternalValue.setBeforeFirst(this.ListInternalBeforeFirst);
            }
    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setConstructor(this);
    }

    @Override
    public String build(){

        BuildState buildState = this.build_state;

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("Constructor");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;

                initListSetParamDirectives();
                initListStringParamDirectives();
                initListInitDirectives();
                initListInternalDirectives();
        
                initListSetParamInternals(null);
                initListStringParamInternals(null);
                initListInitInternals(null);
                initListInternalInternals(null);
        
        StringBuilder sb0 = new StringBuilder();

        sb0.append("    public M");
        sb0.append(buildName());
        sb0.append("(");
        sb0.append(buildListStringParam());
        sb0.append(")");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListSetParam());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListInit());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListInternal());
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }

    @Override
    String build(Context context) {
        return build();
    }
=======
      for(Object oStringParam : this.eStringParam) {
        if(first) {
          first = false;
        }
        else {
          sb.append(", ");
        }
        sb.append(oStringParam.toString());
      }
    }
    sb.append("){");
    sb.append(System.getProperty("line.separator"));
    if(this.eSetParam.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oSetParam : this.eSetParam) {
      sb.append(oSetParam.toString());
    }
    if(this.eInitMacroParam_InitMacroInternal_InitStringInternal.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oInitMacroParam_InitMacroInternal_InitStringInternal : this.eInitMacroParam_InitMacroInternal_InitStringInternal) {
      sb.append(oInitMacroParam_InitMacroInternal_InitStringInternal.toString());
    }
    if(this.eInitInternalValue.size() > 0) {
      sb.append(System.getProperty("line.separator"));
    }
    for(Object oInitInternalValue : this.eInitInternalValue) {
      sb.append(oInitInternalValue.toString());
    }
    sb.append("    }");
    sb.append(System.getProperty("line.separator"));
    return sb.toString();
  }

>>>>>>> Revert "MaJ Fichier de Macro + Generation"
}
