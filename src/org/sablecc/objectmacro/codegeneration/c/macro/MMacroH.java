/* This file was generated by SableCC's ObjectMacro. */package org.sablecc.objectmacro.codegeneration.c.macro;import java.util.*;public class MMacroH extends Macro{        private String field_MacroName;        private final List<Macro> list_Fields;        private DSeparator FieldsSeparator;        private DBeforeFirst FieldsBeforeFirst;        private DAfterLast FieldsAfterLast;        private DNone FieldsNone;        private final InternalValue FieldsValue;        private final List<Macro> list_ContextFields;        private DSeparator ContextFieldsSeparator;        private DBeforeFirst ContextFieldsBeforeFirst;        private DAfterLast ContextFieldsAfterLast;        private DNone ContextFieldsNone;        private final InternalValue ContextFieldsValue;        private final List<Macro> list_Constructor;        private DSeparator ConstructorSeparator;        private DBeforeFirst ConstructorBeforeFirst;        private DAfterLast ConstructorAfterLast;        private DNone ConstructorNone;        private final InternalValue ConstructorValue;        private final List<Macro> list_ContextParam;        private DSeparator ContextParamSeparator;        private DBeforeFirst ContextParamBeforeFirst;        private DAfterLast ContextParamAfterLast;        private DNone ContextParamNone;        private final InternalValue ContextParamValue;        private final List<Macro> list_Methods;        private DSeparator MethodsSeparator;        private DBeforeFirst MethodsBeforeFirst;        private DAfterLast MethodsAfterLast;        private DNone MethodsNone;        private final InternalValue MethodsValue;        private final List<Macro> list_InitDirectives;        private DSeparator InitDirectivesSeparator;        private DBeforeFirst InitDirectivesBeforeFirst;        private DAfterLast InitDirectivesAfterLast;        private DNone InitDirectivesNone;        private final InternalValue InitDirectivesValue;        private final List<Macro> list_StrSplitFunction;        private DSeparator StrSplitFunctionSeparator;        private DBeforeFirst StrSplitFunctionBeforeFirst;        private DAfterLast StrSplitFunctionAfterLast;        private DNone StrSplitFunctionNone;        private final InternalValue StrSplitFunctionValue;        private final List<Macro> list_Functions;        private DSeparator FunctionsSeparator;        private DBeforeFirst FunctionsBeforeFirst;        private DAfterLast FunctionsAfterLast;        private DNone FunctionsNone;        private final InternalValue FunctionsValue;            private final Context FieldsContext = new Context();        private final Context ContextFieldsContext = new Context();        private final Context ConstructorContext = new Context();        private final Context ContextParamContext = new Context();        private final Context MethodsContext = new Context();        private final Context InitDirectivesContext = new Context();        private final Context StrSplitFunctionContext = new Context();        private final Context FunctionsContext = new Context();            public MMacroH(String pMacroName){                this.setPMacroName(pMacroName);        this.list_Fields = new ArrayList<>();        this.list_ContextFields = new ArrayList<>();        this.list_Constructor = new ArrayList<>();        this.list_ContextParam = new ArrayList<>();        this.list_Methods = new ArrayList<>();        this.list_InitDirectives = new ArrayList<>();        this.list_StrSplitFunction = new ArrayList<>();        this.list_Functions = new ArrayList<>();            this.FieldsValue = new InternalValue(this.list_Fields, this.FieldsContext);        this.ContextFieldsValue = new InternalValue(this.list_ContextFields, this.ContextFieldsContext);        this.ConstructorValue = new InternalValue(this.list_Constructor, this.ConstructorContext);        this.ContextParamValue = new InternalValue(this.list_ContextParam, this.ContextParamContext);        this.MethodsValue = new InternalValue(this.list_Methods, this.MethodsContext);        this.InitDirectivesValue = new InternalValue(this.list_InitDirectives, this.InitDirectivesContext);        this.StrSplitFunctionValue = new InternalValue(this.list_StrSplitFunction, this.StrSplitFunctionContext);        this.FunctionsValue = new InternalValue(this.list_Functions, this.FunctionsContext);    }            private void setPMacroName( String pMacroName ){        if(pMacroName == null){            throw ObjectMacroException.parameterNull("MacroName");        }            this.field_MacroName = pMacroName;    }        public void addFields(MFieldStringDeclaration macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Fields");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("FieldStringDeclaration");                }            this.list_Fields.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFields(MFieldMacroDeclaration macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Fields");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("FieldMacroDeclaration");                }            this.list_Fields.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFields(MInternalFieldDeclaration macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Fields");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalFieldDeclaration");                }            this.list_Fields.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFields(MDirectiveFieldsDeclaration macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Fields");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("DirectiveFieldsDeclaration");                }            this.list_Fields.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFields(MInternalMacrosValueField macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Fields");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalMacrosValueField");                }            this.list_Fields.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addContextFields(MContextField macro){        if(macro == null){            throw ObjectMacroException.parameterNull("ContextFields");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("ContextField");                }            this.list_ContextFields.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addConstructor(MConstructorH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Constructor");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("ConstructorH");                }            this.list_Constructor.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addContextParam(MContextParam macro){        if(macro == null){            throw ObjectMacroException.parameterNull("ContextParam");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("ContextParam");                }            this.list_ContextParam.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addMethods(MAddStringVtH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Methods");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("AddStringVtH");                }            this.list_Methods.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addMethods(MAddMacroVtH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Methods");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("AddMacroVtH");                }            this.list_Methods.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addMethods(MInternalStringSetterVtH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Methods");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalStringSetterVtH");                }            this.list_Methods.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addMethods(MInternalStringGetterVtH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Methods");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalStringGetterVtH");                }            this.list_Methods.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addMethods(MInternalMacroSetterVtH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Methods");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalMacroSetterVtH");                }            this.list_Methods.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addMethods(MParamMacroRefVtH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Methods");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("ParamMacroRefVtH");                }            this.list_Methods.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addMethods(MInternalMacroRefVtH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Methods");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalMacroRefVtH");                }            this.list_Methods.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addInitDirectives(MInitDirectivesH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("InitDirectives");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InitDirectivesH");                }            this.list_InitDirectives.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addStrSplitFunction(MStrSplitFunctionH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("StrSplitFunction");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("StrSplitFunctionH");                }            this.list_StrSplitFunction.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MAddStringH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("AddStringH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MAddMacroH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("AddMacroH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MInternalStringSetterH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalStringSetterH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MInternalStringGetterH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalStringGetterH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MInternalMacroSetterH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalMacroSetterH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MParamMacroRefH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("ParamMacroRefH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MInternalMacroRefH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalMacroRefH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MParamRefBuilderH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("ParamRefBuilderH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }        public void addFunctions(MInternalRefBuilderH macro){        if(macro == null){            throw ObjectMacroException.parameterNull("Functions");        }                if(this.build_state != null){                    throw ObjectMacroException.cannotModify("InternalRefBuilderH");                }            this.list_Functions.add(macro);        this.children.add(macro);        Macro.cycleDetector.detectCycle(this, macro);    }            private String buildMacroName(){            return this.field_MacroName;    }        private String buildFields(){        StringBuilder sb = new StringBuilder();        Context local_context = FieldsContext;        List<Macro> macros = this.list_Fields;            int i = 0;        int nb_macros = macros.size();        String expansion = null;            if(this.FieldsNone != null){            sb.append(this.FieldsNone.apply(i, "", nb_macros));        }            for(Macro macro : macros){            expansion = macro.build(local_context);                if(this.FieldsBeforeFirst != null){                expansion = this.FieldsBeforeFirst.apply(i, expansion, nb_macros);            }                if(this.FieldsAfterLast != null){                expansion = this.FieldsAfterLast.apply(i, expansion, nb_macros);            }                if(this.FieldsSeparator != null){                expansion = this.FieldsSeparator.apply(i, expansion, nb_macros);            }                sb.append(expansion);            i++;        }            return sb.toString();    }        private String buildContextFields(){        StringBuilder sb = new StringBuilder();        Context local_context = ContextFieldsContext;        List<Macro> macros = this.list_ContextFields;            int i = 0;        int nb_macros = macros.size();        String expansion = null;            if(this.ContextFieldsNone != null){            sb.append(this.ContextFieldsNone.apply(i, "", nb_macros));        }            for(Macro macro : macros){            expansion = macro.build(local_context);                if(this.ContextFieldsBeforeFirst != null){                expansion = this.ContextFieldsBeforeFirst.apply(i, expansion, nb_macros);            }                if(this.ContextFieldsAfterLast != null){                expansion = this.ContextFieldsAfterLast.apply(i, expansion, nb_macros);            }                if(this.ContextFieldsSeparator != null){                expansion = this.ContextFieldsSeparator.apply(i, expansion, nb_macros);            }                sb.append(expansion);            i++;        }            return sb.toString();    }        private String buildConstructor(){        StringBuilder sb = new StringBuilder();        Context local_context = ConstructorContext;        List<Macro> macros = this.list_Constructor;            int i = 0;        int nb_macros = macros.size();        String expansion = null;            if(this.ConstructorNone != null){            sb.append(this.ConstructorNone.apply(i, "", nb_macros));        }            for(Macro macro : macros){            expansion = macro.build(local_context);                if(this.ConstructorBeforeFirst != null){                expansion = this.ConstructorBeforeFirst.apply(i, expansion, nb_macros);            }                if(this.ConstructorAfterLast != null){                expansion = this.ConstructorAfterLast.apply(i, expansion, nb_macros);            }                if(this.ConstructorSeparator != null){                expansion = this.ConstructorSeparator.apply(i, expansion, nb_macros);            }                sb.append(expansion);            i++;        }            return sb.toString();    }        private String buildContextParam(){        StringBuilder sb = new StringBuilder();        Context local_context = ContextParamContext;        List<Macro> macros = this.list_ContextParam;            int i = 0;        int nb_macros = macros.size();        String expansion = null;            if(this.ContextParamNone != null){            sb.append(this.ContextParamNone.apply(i, "", nb_macros));        }            for(Macro macro : macros){            expansion = macro.build(local_context);                if(this.ContextParamBeforeFirst != null){                expansion = this.ContextParamBeforeFirst.apply(i, expansion, nb_macros);            }                if(this.ContextParamAfterLast != null){                expansion = this.ContextParamAfterLast.apply(i, expansion, nb_macros);            }                if(this.ContextParamSeparator != null){                expansion = this.ContextParamSeparator.apply(i, expansion, nb_macros);            }                sb.append(expansion);            i++;        }            return sb.toString();    }        private String buildMethods(){        StringBuilder sb = new StringBuilder();        Context local_context = MethodsContext;        List<Macro> macros = this.list_Methods;            int i = 0;        int nb_macros = macros.size();        String expansion = null;            if(this.MethodsNone != null){            sb.append(this.MethodsNone.apply(i, "", nb_macros));        }            for(Macro macro : macros){            expansion = macro.build(local_context);                if(this.MethodsBeforeFirst != null){                expansion = this.MethodsBeforeFirst.apply(i, expansion, nb_macros);            }                if(this.MethodsAfterLast != null){                expansion = this.MethodsAfterLast.apply(i, expansion, nb_macros);            }                if(this.MethodsSeparator != null){                expansion = this.MethodsSeparator.apply(i, expansion, nb_macros);            }                sb.append(expansion);            i++;        }            return sb.toString();    }        private String buildInitDirectives(){        StringBuilder sb = new StringBuilder();        Context local_context = InitDirectivesContext;        List<Macro> macros = this.list_InitDirectives;            int i = 0;        int nb_macros = macros.size();        String expansion = null;            if(this.InitDirectivesNone != null){            sb.append(this.InitDirectivesNone.apply(i, "", nb_macros));        }            for(Macro macro : macros){            expansion = macro.build(local_context);                if(this.InitDirectivesBeforeFirst != null){                expansion = this.InitDirectivesBeforeFirst.apply(i, expansion, nb_macros);            }                if(this.InitDirectivesAfterLast != null){                expansion = this.InitDirectivesAfterLast.apply(i, expansion, nb_macros);            }                if(this.InitDirectivesSeparator != null){                expansion = this.InitDirectivesSeparator.apply(i, expansion, nb_macros);            }                sb.append(expansion);            i++;        }            return sb.toString();    }        private String buildStrSplitFunction(){        StringBuilder sb = new StringBuilder();        Context local_context = StrSplitFunctionContext;        List<Macro> macros = this.list_StrSplitFunction;            int i = 0;        int nb_macros = macros.size();        String expansion = null;            if(this.StrSplitFunctionNone != null){            sb.append(this.StrSplitFunctionNone.apply(i, "", nb_macros));        }            for(Macro macro : macros){            expansion = macro.build(local_context);                if(this.StrSplitFunctionBeforeFirst != null){                expansion = this.StrSplitFunctionBeforeFirst.apply(i, expansion, nb_macros);            }                if(this.StrSplitFunctionAfterLast != null){                expansion = this.StrSplitFunctionAfterLast.apply(i, expansion, nb_macros);            }                if(this.StrSplitFunctionSeparator != null){                expansion = this.StrSplitFunctionSeparator.apply(i, expansion, nb_macros);            }                sb.append(expansion);            i++;        }            return sb.toString();    }        private String buildFunctions(){        StringBuilder sb = new StringBuilder();        Context local_context = FunctionsContext;        List<Macro> macros = this.list_Functions;            int i = 0;        int nb_macros = macros.size();        String expansion = null;            if(this.FunctionsNone != null){            sb.append(this.FunctionsNone.apply(i, "", nb_macros));        }            for(Macro macro : macros){            expansion = macro.build(local_context);                if(this.FunctionsBeforeFirst != null){                expansion = this.FunctionsBeforeFirst.apply(i, expansion, nb_macros);            }                if(this.FunctionsAfterLast != null){                expansion = this.FunctionsAfterLast.apply(i, expansion, nb_macros);            }                if(this.FunctionsSeparator != null){                expansion = this.FunctionsSeparator.apply(i, expansion, nb_macros);            }                sb.append(expansion);            i++;        }            return sb.toString();    }            private String getMacroName(){            return this.field_MacroName;    }        private InternalValue getFields(){        return this.FieldsValue;    }        private InternalValue getContextFields(){        return this.ContextFieldsValue;    }        private InternalValue getConstructor(){        return this.ConstructorValue;    }        private InternalValue getContextParam(){        return this.ContextParamValue;    }        private InternalValue getMethods(){        return this.MethodsValue;    }        private InternalValue getInitDirectives(){        return this.InitDirectivesValue;    }        private InternalValue getStrSplitFunction(){        return this.StrSplitFunctionValue;    }        private InternalValue getFunctions(){        return this.FunctionsValue;    }        private void initFieldsInternals(Context context){        for(Macro macro : this.list_Fields){            macro.apply(new InternalsInitializer("Fields"){                @Override                void setFieldStringDeclaration(MFieldStringDeclaration mFieldStringDeclaration){                                                                        }@Override                void setFieldMacroDeclaration(MFieldMacroDeclaration mFieldMacroDeclaration){                                                                        }@Override                void setInternalFieldDeclaration(MInternalFieldDeclaration mInternalFieldDeclaration){                                                                        }@Override                void setDirectiveFieldsDeclaration(MDirectiveFieldsDeclaration mDirectiveFieldsDeclaration){                                                                        }@Override                void setInternalMacrosValueField(MInternalMacrosValueField mInternalMacrosValueField){                                                                        }            });        }    }        private void initContextFieldsInternals(Context context){        for(Macro macro : this.list_ContextFields){            macro.apply(new InternalsInitializer("ContextFields"){                @Override                void setContextField(MContextField mContextField){                                                                        }            });        }    }        private void initConstructorInternals(Context context){        for(Macro macro : this.list_Constructor){            macro.apply(new InternalsInitializer("Constructor"){                @Override                void setConstructorH(MConstructorH mConstructorH){                                                        mConstructorH.setMacroName(ConstructorContext, getMacroName());                }            });        }    }        private void initContextParamInternals(Context context){        for(Macro macro : this.list_ContextParam){            macro.apply(new InternalsInitializer("ContextParam"){                @Override                void setContextParam(MContextParam mContextParam){                                                                        }            });        }    }        private void initMethodsInternals(Context context){        for(Macro macro : this.list_Methods){            macro.apply(new InternalsInitializer("Methods"){                @Override                void setAddStringVtH(MAddStringVtH mAddStringVtH){                                                        mAddStringVtH.setClassName(MethodsContext, getMacroName());                }@Override                void setAddMacroVtH(MAddMacroVtH mAddMacroVtH){                                                        mAddMacroVtH.setClassName(MethodsContext, getMacroName());                }@Override                void setInternalStringSetterVtH(MInternalStringSetterVtH mInternalStringSetterVtH){                                                        mInternalStringSetterVtH.setMacroName(MethodsContext, getMacroName());                }@Override                void setInternalStringGetterVtH(MInternalStringGetterVtH mInternalStringGetterVtH){                                                        mInternalStringGetterVtH.setMacroName(MethodsContext, getMacroName());                }@Override                void setInternalMacroSetterVtH(MInternalMacroSetterVtH mInternalMacroSetterVtH){                                                        mInternalMacroSetterVtH.setMacroName(MethodsContext, getMacroName());                }@Override                void setParamMacroRefVtH(MParamMacroRefVtH mParamMacroRefVtH){                                                        mParamMacroRefVtH.setMacroName(MethodsContext, getMacroName());                }@Override                void setInternalMacroRefVtH(MInternalMacroRefVtH mInternalMacroRefVtH){                                                        mInternalMacroRefVtH.setMacroName(MethodsContext, getMacroName());                }            });        }    }        private void initInitDirectivesInternals(Context context){        for(Macro macro : this.list_InitDirectives){            macro.apply(new InternalsInitializer("InitDirectives"){                @Override                void setInitDirectivesH(MInitDirectivesH mInitDirectivesH){                                                        mInitDirectivesH.setMacroName(InitDirectivesContext, getMacroName());                }            });        }    }        private void initStrSplitFunctionInternals(Context context){        for(Macro macro : this.list_StrSplitFunction){            macro.apply(new InternalsInitializer("StrSplitFunction"){                @Override                void setStrSplitFunctionH(MStrSplitFunctionH mStrSplitFunctionH){                                                        mStrSplitFunctionH.setMacroName(StrSplitFunctionContext, getMacroName());                }            });        }    }        private void initFunctionsInternals(Context context){        for(Macro macro : this.list_Functions){            macro.apply(new InternalsInitializer("Functions"){                @Override                void setAddStringH(MAddStringH mAddStringH){                                                        mAddStringH.setClassName(FunctionsContext, getMacroName());                }@Override                void setAddMacroH(MAddMacroH mAddMacroH){                                                        mAddMacroH.setClassName(FunctionsContext, getMacroName());                }@Override                void setInternalStringSetterH(MInternalStringSetterH mInternalStringSetterH){                                                        mInternalStringSetterH.setMacroName(FunctionsContext, getMacroName());                }@Override                void setInternalStringGetterH(MInternalStringGetterH mInternalStringGetterH){                                                        mInternalStringGetterH.setMacroName(FunctionsContext, getMacroName());                }@Override                void setInternalMacroSetterH(MInternalMacroSetterH mInternalMacroSetterH){                                                        mInternalMacroSetterH.setMacroName(FunctionsContext, getMacroName());                }@Override                void setParamMacroRefH(MParamMacroRefH mParamMacroRefH){                                                        mParamMacroRefH.setMacroName(FunctionsContext, getMacroName());                }@Override                void setInternalMacroRefH(MInternalMacroRefH mInternalMacroRefH){                                                        mInternalMacroRefH.setMacroName(FunctionsContext, getMacroName());                }@Override                void setParamRefBuilderH(MParamRefBuilderH mParamRefBuilderH){                                                        mParamRefBuilderH.setMacroName(FunctionsContext, getMacroName());                }@Override                void setInternalRefBuilderH(MInternalRefBuilderH mInternalRefBuilderH){                                                        mInternalRefBuilderH.setMacroName(FunctionsContext, getMacroName());                }            });        }    }            private void initFieldsDirectives(){        StringBuilder sb0 = new StringBuilder();        sb0.append(LINE_SEPARATOR);        this.FieldsSeparator = new DSeparator(sb0.toString());        this.FieldsValue.setSeparator(this.FieldsSeparator);    }        private void initContextFieldsDirectives(){        StringBuilder sb0 = new StringBuilder();        sb0.append(LINE_SEPARATOR);        this.ContextFieldsBeforeFirst = new DBeforeFirst(sb0.toString());        this.ContextFieldsValue.setBeforeFirst(this.ContextFieldsBeforeFirst);StringBuilder sb1 = new StringBuilder();        sb1.append(LINE_SEPARATOR);        this.ContextFieldsSeparator = new DSeparator(sb1.toString());        this.ContextFieldsValue.setSeparator(this.ContextFieldsSeparator);    }        private void initConstructorDirectives(){            }        private void initContextParamDirectives(){//        StringBuilder sb0 = new StringBuilder();//////        sb1.append(", ");//////        this.ContextParamBeforeFirst = new DBeforeFirst(sb0.toString());//////        this.ContextParamValue.setBeforeFirst(this.ContextParamBeforeFirst);    }        private void initMethodsDirectives(){        StringBuilder sb0 = new StringBuilder();        sb0.append(LINE_SEPARATOR);        this.MethodsSeparator = new DSeparator(sb0.toString());        this.MethodsValue.setSeparator(this.MethodsSeparator);    }        private void initInitDirectivesDirectives(){        StringBuilder sb0 = new StringBuilder();        sb0.append(LINE_SEPARATOR);        this.InitDirectivesSeparator = new DSeparator(sb0.toString());        this.InitDirectivesValue.setSeparator(this.InitDirectivesSeparator);StringBuilder sb1 = new StringBuilder();        sb1.append(LINE_SEPARATOR);        this.InitDirectivesBeforeFirst = new DBeforeFirst(sb1.toString());        this.InitDirectivesValue.setBeforeFirst(this.InitDirectivesBeforeFirst);    }        private void initStrSplitFunctionDirectives(){        StringBuilder sb0 = new StringBuilder();        sb0.append(LINE_SEPARATOR);        this.StrSplitFunctionSeparator = new DSeparator(sb0.toString());        this.StrSplitFunctionValue.setSeparator(this.StrSplitFunctionSeparator);StringBuilder sb1 = new StringBuilder();        sb1.append(LINE_SEPARATOR);        this.StrSplitFunctionBeforeFirst = new DBeforeFirst(sb1.toString());        this.StrSplitFunctionValue.setBeforeFirst(this.StrSplitFunctionBeforeFirst);    }        private void initFunctionsDirectives(){        StringBuilder sb0 = new StringBuilder();        sb0.append(LINE_SEPARATOR);        this.FunctionsSeparator = new DSeparator(sb0.toString());        this.FunctionsValue.setSeparator(this.FunctionsSeparator);    }        @Override     void apply(             InternalsInitializer internalsInitializer){             internalsInitializer.setMacroH(this);     }            @Override    public String build(){            BuildState buildState = this.build_state;            if(buildState == null){            buildState = new BuildState();        }        else if(buildState.getExpansion() == null){            throw ObjectMacroException.cyclicReference("MacroH");        }        else{            return buildState.getExpansion();        }        this.build_state = buildState;        List<String> indentations = new LinkedList<>();        StringBuilder sbIndentation = new StringBuilder();            initFieldsDirectives();        initContextFieldsDirectives();        initConstructorDirectives();        initContextParamDirectives();        initMethodsDirectives();        initInitDirectivesDirectives();        initStrSplitFunctionDirectives();        initFunctionsDirectives();                initFieldsInternals(null);        initContextFieldsInternals(null);        initConstructorInternals(null);        initContextParamInternals(null);        initMethodsInternals(null);        initInitDirectivesInternals(null);        initStrSplitFunctionInternals(null);        initFunctionsInternals(null);            StringBuilder sb0 = new StringBuilder();            sb0.append("#");        sb0.append("ifndef M");        sb0.append(buildMacroName());        sb0.append("_H");        sb0.append(LINE_SEPARATOR);        sb0.append("#");        sb0.append("define M");        sb0.append(buildMacroName());        sb0.append("_H");        sb0.append(LINE_SEPARATOR);        sb0.append(LINE_SEPARATOR);        sb0.append("extern struct M");        sb0.append(buildMacroName());        sb0.append("_VT VT_M");        sb0.append(buildMacroName());        sb0.append(";");        sb0.append(LINE_SEPARATOR);        sb0.append("extern void *HT_M");        sb0.append(buildMacroName());        sb0.append("[];");        sb0.append(LINE_SEPARATOR);        sb0.append(LINE_SEPARATOR);        sb0.append("typedef struct M");        sb0.append(buildMacroName());        sb0.append(LINE_SEPARATOR);        sb0.append("{");        sb0.append(LINE_SEPARATOR);        sb0.append("    struct M");        sb0.append(buildMacroName());        sb0.append("_VT (*vt);");        sb0.append(LINE_SEPARATOR);        sb0.append("    struct LinkedList *children;");        sb0.append(LINE_SEPARATOR);        sb0.append("    struct Context context;");        sb0.append(LINE_SEPARATOR);        StringBuilder sb1 = new StringBuilder();        sbIndentation = new StringBuilder();        sbIndentation.append("    ");        indentations.add(sbIndentation.toString());        sb1.append(buildFields());        sb1.append(LINE_SEPARATOR);        sb1.append(buildContextFields());        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));        sb0.append(LINE_SEPARATOR);        sb0.append("} M");        sb0.append(buildMacroName());        sb0.append(";");        sb0.append(LINE_SEPARATOR);        sb0.append(LINE_SEPARATOR);        sb0.append("typedef struct M");        sb0.append(buildMacroName());        sb0.append("_VT");        sb0.append(LINE_SEPARATOR);        sb0.append("{");        sb0.append(LINE_SEPARATOR);        sb0.append("    int hl;");        sb0.append(LINE_SEPARATOR);        sb0.append("    void* (*ht)[];");        sb0.append(LINE_SEPARATOR);        sb0.append("    char* (*build)(struct M");        sb0.append(buildMacroName());        sb0.append("*");        sb0.append(buildContextParam());        sb0.append(");");        sb0.append(LINE_SEPARATOR);        sb0.append("    void (*apply)(struct M");        sb0.append(buildMacroName());        sb0.append("*, struct InternalsInitializer* visitor);");        sb0.append(LINE_SEPARATOR);        sb0.append("    struct LinkedList* (*getChildren)(struct M");        sb0.append(buildMacroName());        sb0.append("*);");        sb0.append(LINE_SEPARATOR);        StringBuilder sb2 = new StringBuilder();        sbIndentation = new StringBuilder();        sbIndentation.append("    ");        indentations.add(sbIndentation.toString());        sb2.append(buildMethods());        sb0.append(applyIndent(sb2.toString(), indentations.remove(indentations.size() - 1)));        sb0.append(LINE_SEPARATOR);        sb0.append("} M");        sb0.append(buildMacroName());        sb0.append("_VT;");        sb0.append(LINE_SEPARATOR);        sb0.append(LINE_SEPARATOR);        sb0.append(buildConstructor());        sb0.append(LINE_SEPARATOR);        sb0.append(LINE_SEPARATOR);        sb0.append(buildInitDirectives());        sb0.append(LINE_SEPARATOR);        sb0.append(buildStrSplitFunction());        sb0.append(LINE_SEPARATOR);        sb0.append(buildFunctions());        sb0.append(LINE_SEPARATOR);        sb0.append(LINE_SEPARATOR);        sb0.append("void free_M");        sb0.append(buildMacroName());        sb0.append("(struct M");        sb0.append(buildMacroName());        sb0.append("*);");        sb0.append(LINE_SEPARATOR);        sb0.append("char* M");        sb0.append(buildMacroName());        sb0.append("_build(struct M");        sb0.append(buildMacroName());        sb0.append("*");        sb0.append(buildContextParam());        sb0.append(");");        sb0.append(LINE_SEPARATOR);        sb0.append("void M");        sb0.append(buildMacroName());        sb0.append("_apply(struct M");        sb0.append(buildMacroName());        sb0.append("*, struct InternalsInitializer* visitor);");        sb0.append(LINE_SEPARATOR);        sb0.append("struct LinkedList* M");        sb0.append(buildMacroName());        sb0.append("_getChildren(struct M");        sb0.append(buildMacroName());        sb0.append("*);");        sb0.append(LINE_SEPARATOR);        sb0.append(LINE_SEPARATOR);        sb0.append("#");        sb0.append("endif //M");        sb0.append(buildMacroName());        sb0.append("_H");            buildState.setExpansion(sb0.toString());        return sb0.toString();    }            @Override    String build(Context context) {     return build();    }    private String applyIndent(                            String macro,                            String indent){            StringBuilder sb = new StringBuilder();            String[] lines = macro.split( "\n");            if(lines.length > 1){                for(int i = 0; i < lines.length; i++){                    String line = lines[i];                    sb.append(indent).append(line);                    if(i < lines.length - 1){                        sb.append(LINE_SEPARATOR);                    }                }            }            else{                sb.append(indent).append(macro);            }            return sb.toString();    }}