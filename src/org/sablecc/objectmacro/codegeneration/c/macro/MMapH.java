/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MMapH extends Macro{
    
    
    
    
    
    public MMapH(){
    
    
    }
    
    
    
    
    
    
    
    
    
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setMapH(this);
     }
    
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("MapH");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
        
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("/**");
        sb0.append(LINE_SEPARATOR);
        sb0.append(" * Copyright (c) 2014 rxi");
        sb0.append(LINE_SEPARATOR);
        sb0.append(" *");
        sb0.append(LINE_SEPARATOR);
        sb0.append(" * This library is free software; you can redistribute it and/or modify it");
        sb0.append(LINE_SEPARATOR);
        sb0.append(" * under the terms of the MIT license. See LICENSE for details.");
        sb0.append(LINE_SEPARATOR);
        sb0.append(" */");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("ifndef MAP_H");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define MAP_H");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include <string.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define MAP_VERSION \"0.1.0\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("struct map_node_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef struct map_node_t map_node_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef struct ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    map_node_t **buckets;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    unsigned nbuckets, nnodes;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("} map_base_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef struct ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    unsigned bucketidx;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    map_node_t *node;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("} map_iter_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define map_t(T)\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("  struct ");
        sb0.append("{");
        sb0.append(" map_base_t base; T *ref; T tmp; }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define map_init(m)\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("  memset(m, 0, sizeof(*(m)))");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define map_deinit(m)\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("  map_deinit_(&(m)->base)");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define map_get(m, key)\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("  ( (m)->ref = map_get_(&(m)->base, key) )");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define map_set(m, key, value)\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("  ( (m)->tmp = (value),\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    map_set_(&(m)->base, key, &(m)->tmp, sizeof((m)->tmp)) )");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define map_remove(m, key)\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("  map_remove_(&(m)->base, key)");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define map_iter(m)\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("  map_iter_()");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define map_next(m, iter)\\");
        sb0.append(LINE_SEPARATOR);
        sb0.append("  map_next_(&(m)->base, iter)");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void map_deinit_(map_base_t *m);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void *map_get_(map_base_t *m, const char *key);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("int map_set_(map_base_t *m, const char *key, void *value, int vsize);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void map_remove_(map_base_t *m, const char *key);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("map_iter_t map_iter_(void);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("const char *map_next_(map_base_t *m, map_iter_t *iter);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef map_t(void*) map_void_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef map_t(char*) map_str_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef map_t(int) map_int_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef map_t(char) map_char_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef map_t(float) map_float_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef map_t(double) map_double_t;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("endif");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}