/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MParamStringRefBuilder extends Macro{
    
    private String field_FieldName;
    
    private final List<Macro> list_ContextParam;
    
    private DSeparator ContextParamSeparator;
    
    private DBeforeFirst ContextParamBeforeFirst;
    
    private DAfterLast ContextParamAfterLast;
    
    private DNone ContextParamNone;
    
    private final InternalValue ContextParamValue;
    
    private Map<Context, String> field_MacroName = new LinkedHashMap<>();
    
    
    private final Context ContextParamContext = new Context();
    
    
    public MParamStringRefBuilder(String pFieldName){
    
            this.setPFieldName(pFieldName);
        this.list_ContextParam = new ArrayList<>();
    
        this.ContextParamValue = new InternalValue(this.list_ContextParam, this.ContextParamContext);
    }
    
    
    private void setPFieldName( String pFieldName ){
        if(pFieldName == null){
            throw ObjectMacroException.parameterNull("FieldName");
        }
    
        this.field_FieldName = pFieldName;
    }
    
    public void addContextParam(MContextParam macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ContextParam");
        }
        
    
        this.list_ContextParam.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
        void setMacroName(
                Context context,
                String value) {
    
            if(value == null){
                throw new RuntimeException("value cannot be null here");
            }
    
            this.field_MacroName.put(context, value);
        }
    
    
    private String buildFieldName(){
    
        return this.field_FieldName;
    }
    
    private String buildContextParam(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ContextParamContext;
        List<Macro> macros = this.list_ContextParam;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.ContextParamNone != null){
            sb.append(this.ContextParamNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.ContextParamBeforeFirst != null){
                expansion = this.ContextParamBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.ContextParamAfterLast != null){
                expansion = this.ContextParamAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.ContextParamSeparator != null){
                expansion = this.ContextParamSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildMacroName(Context context){
    
        return this.field_MacroName.get(context);
    }
    
    
    private String getFieldName(){
    
        return this.field_FieldName;
    }
    
    private InternalValue getContextParam(){
        return this.ContextParamValue;
    }
    
    private String getMacroName(Context context){
    
        return this.field_MacroName.get(context);
    }
    
    private void initContextParamInternals(Context context){
        for(Macro macro : this.list_ContextParam){
            macro.apply(new InternalsInitializer("ContextParam"){
                @Override
                void setContextParam(MContextParam mContextParam){
                
                    
                    
                }
            });
        }
    }
    
    
    private void initContextParamDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(", ");
        this.ContextParamBeforeFirst = new DBeforeFirst(sb0.toString());
        this.ContextParamValue.setBeforeFirst(this.ContextParamBeforeFirst);
    }
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setParamStringRefBuilder(this);
     }
    
    
    @Override
    public String build(Context context){
    
        BuildState buildState = this.build_states.get(context);
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("ParamStringRefBuilder");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_states.put(context, buildState);
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initContextParamDirectives();
        
        initContextParamInternals(context);
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("char* M");
        sb0.append(buildMacroName(context));
        sb0.append("_build");
        sb0.append(buildFieldName());
        sb0.append("(M");
        sb0.append(buildMacroName(context));
        sb0.append(" *this");
        sb0.append(buildContextParam());
        sb0.append(")");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return this->list_");
        sb0.append(buildFieldName());
        sb0.append("->vt->toString(this->list_");
        sb0.append(buildFieldName());
        sb0.append(");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}