/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MClassInternalValueC extends Macro{
    
    
    
    
    
    public MClassInternalValueC(){
    
    
    }
    
    
    
    
    
    
    
    
    
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setClassInternalValueC(this);
     }
    
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("ClassInternalValueC");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
        
    
        StringBuilder sb0 = new StringBuilder();
    
        MHeader minsert_2 = new MHeader();
        
        
        sb0.append(minsert_2.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdlib.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdio.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"DNone.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"DBeforeFirst.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"DAfterLast.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"DSeparator.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"InternalValue.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("struct InternalValue_VT VT_InternalValue = ");
        sb0.append("{");
        sb0.append("0, &HT_InternalValue, &InternalValue_build, &InternalValue_setNone, &InternalValue_setBeforeFirst, &InternalValue_AfterLast, &InternalValue_Separator};");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void* HT_InternalValue[] = ");
        sb0.append("{");
        sb0.append("&VT_InternalValue};");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("InternalValue* new_InternalValue(LinkedList *macros, Context context)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    InternalValue* internalValue = malloc(sizeof(InternalValue));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    internalValue->vt = &VT_InternalValue;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    internalValue->macros = macros;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    internalValue->context = context;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return internalValue;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void free_InternalValue(InternalValue* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("char* InternalValue_build(InternalValue* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(this->cache != NULL)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            return this->cache;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        Stringbuilder *sb = new_Stringbuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        int i = 0;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        int nb_macros = this->macros->size;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(this->dNone != NULL)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            sb->append(sb, this->dNone->apply(this->dNone, i, \"\", nb_macros));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        for(i = 0; i < nb_macros; i++)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            char* expansion = macro->vt->build(this->context);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(this->dBeforeFirst != NULL)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                expansion = this->dBeforeFirst->apply(this->dBeforeFirst, i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(this->dAfterLast != NULL)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                expansion = this->dAfterLast->apply(this->dAfterLast, i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(this->dSeparator != NULL)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                expansion = this->dSeparator->apply(this->dSeparator, i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            sb->vt->append(sb, expansion);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        this->cache = sb->vt->toString(sb);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return this->cache;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void InternalValue_setNone(InternalValue* this, DNone* directive)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->dNone = directive;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void InternalValue_setBeforeFirst(InternalValue* this, DBeforeFirst* directive)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->dBeforeFirst = directive;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void InternalValue_setAfterLast(InternalValue* this, DAfterLast* directive)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->dAfterLast = directive;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void InternalValue_setSeparator(InternalValue* this, DSeparator* directive)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->dSeparator = directive;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}