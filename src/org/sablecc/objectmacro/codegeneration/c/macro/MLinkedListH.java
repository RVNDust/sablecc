/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MLinkedListH extends Macro{
    
    
    
    
    
    public MLinkedListH(){
    
    
    }
    
    
    
    
    
    
    
    
    
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setLinkedListH(this);
     }
    
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("LinkedListH");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
        
    
        StringBuilder sb0 = new StringBuilder();
    
        MHeader minsert_3 = new MHeader();
        
        
        sb0.append(minsert_3.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("ifndef LINKEDLIST_H");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define LINKEDLIST_H");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("extern struct LinkedList_VT VT_LinkedList;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("extern void *HT_LinkedList[];");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef struct LinkedList");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    struct LinkedList_VT (*vt);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    struct Node *nodes;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    unsigned int size;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("} LinkedList;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("typedef struct LinkedList_VT");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    int hl;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void* (*ht)[];");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void (*addFirst)(struct LinkedList*, void *new_data, size_t data_size);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void (*addLast)(struct LinkedList*, void *new_data, size_t data_size);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void (*addAtIndex)(struct LinkedList*, void *new_data, size_t data_size, unsigned int index);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void* (*getAtIndex)(struct LinkedList*, unsigned int index);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void (*removeFirst)(struct LinkedList*);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void (*removeLast)(struct LinkedList*);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void (*removeAtIndex)(struct LinkedList*, unsigned int index);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    char* (*toString)(struct LinkedList*);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("} LinkedList_VT;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("LinkedList* new_LinkedList();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void free_LinkedList(struct LinkedList*);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_addFirst(struct LinkedList*, void *new_data, size_t data_size);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_addLast(struct LinkedList*, void *new_data, size_t data_size);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_addAtIndex(struct LinkedList*, void *new_data, size_t data_size, unsigned int index);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void* LinkedList_getAtIndex(struct LinkedList*, unsigned int index);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_removeFirst(struct LinkedList*);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_removeLast(struct LinkedList*);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_removeAtIndex(struct LinkedList*, unsigned int index);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("char* LinkedList_toString(struct LinkedList*);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("endif //LINKEDLIST_H");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}