/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MLinkedListC extends Macro{
    
    
    
    
    
    public MLinkedListC(){
    
    
    }
    
    
    
    
    
    
    
    
    
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setLinkedListC(this);
     }
    
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("LinkedListC");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
        
    
        StringBuilder sb0 = new StringBuilder();
    
        MHeader minsert_4 = new MHeader();
        
        
        sb0.append(minsert_4.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdlib.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdio.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<string.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"LinkedListNode.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"LinkedList.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("struct LinkedList_VT VT_LinkedList=");
        sb0.append("{");
        sb0.append("0, &HT_LinkedList, &LinkedList_addFirst, &LinkedList_addLast, &LinkedList_addAtIndex, &LinkedList_getAtIndex, &LinkedList_removeFirst, &LinkedList_removeLast, &LinkedList_removeAtIndex, &LinkedList_toString};");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void* HT_LinkedList[] = ");
        sb0.append("{");
        sb0.append("&VT_LinkedList};");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("LinkedList* new_LinkedList()");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    LinkedList* linkedList = malloc(sizeof(LinkedList));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    linkedList->vt = &VT_LinkedList;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    linkedList->nodes = NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    linkedList->size = 0;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return linkedList;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void free_LinkedList(LinkedList* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    //TODO");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_addFirst(LinkedList* this, void *new_data, size_t data_size)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->vt->addAtIndex(this, new_data, data_size, 0);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_addLast(LinkedList* this, void *new_data, size_t data_size)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->vt->addAtIndex(this, new_data, data_size, this->size);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_addAtIndex(LinkedList* this, void *new_data, size_t data_size, unsigned int index)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(index <= this->size)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        new_node->data = malloc(data_size);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        new_node->data = new_data;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(this->nodes != NULL)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Node* prevNode = NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Node* currentNode = this->nodes;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(index == 0)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                new_node->next = currentNode;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                this->nodes = new_node;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            else");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                for(int i = 0; i < index; i++)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    prevNode = currentNode;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    currentNode = currentNode->next;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("                prevNode->next = new_node;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                new_node->next = currentNode;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        else");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            this->nodes = new_node;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        this->size = this->size + 1;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    else");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        exit(1);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void* LinkedList_getAtIndex(LinkedList* this, unsigned int index)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(index <= this->size)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(this->nodes != NULL)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Node* prevNode = NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Node* currentNode = this->nodes;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(index == 0)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                return this->nodes->data;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            else");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                for(int i = 0; i < index; i++)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    prevNode = currentNode;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    currentNode = currentNode->next;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("                return currentNode->data;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        exit(1);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    else");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        exit(1);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_removeFirst(LinkedList* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->vt->removeAtIndex(this, 0);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_removeLast(LinkedList* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->vt->removeAtIndex(this, this->size);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void LinkedList_removeAtIndex(LinkedList* this, unsigned int index)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(index <= this->size)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(this->nodes != NULL)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Node* prevNode = NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Node* currentNode = this->nodes;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(index == 1)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                this->nodes = NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            else");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                for(int i = 0; i < index; i++)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    prevNode = currentNode;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    currentNode = currentNode->next;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("                if(index < this->size-1)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    prevNode->next = currentNode->next;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            free_Node(currentNode);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            this->size = this->size - 1;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    else");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        exit(1);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("char* LinkedList_toString(LinkedList* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    Node *currentNode = this->nodes;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    int currentTextSize = 1;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(currentNode != NULL)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        void *current_data = NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        for(int i = 0; i < this->size; i++)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            current_data = currentNode->data;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            //int textSize = strlen((char*)current_data);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            int textSize = sizeof(current_data);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            currentTextSize = currentTextSize + textSize;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            currentNode = currentNode->next;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        char *currentText = calloc(currentTextSize, sizeof(char));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        strcpy(currentText, \"\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        //char *currentText = \"\";");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        currentNode = this->nodes;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        for(int i = 0; i < this->size; i++)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            current_data = currentNode->data;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            strcat(currentText, (const char*)current_data);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            currentNode = currentNode->next;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return currentText;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return \"\";");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}