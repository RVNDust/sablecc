/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MRedefInternalsInitializerC extends Macro{
    
    private String field_RedefIndex;
    
    private final List<Macro> list_RedefParentInternalsSetterC;
    
    private DSeparator RedefParentInternalsSetterCSeparator;
    
    private DBeforeFirst RedefParentInternalsSetterCBeforeFirst;
    
    private DAfterLast RedefParentInternalsSetterCAfterLast;
    
    private DNone RedefParentInternalsSetterCNone;
    
    private final InternalValue RedefParentInternalsSetterCValue;
    
    
    private final Context RedefParentInternalsSetterCContext = new Context();
    
    
    public MRedefInternalsInitializerC(String pRedefIndex){
    
            this.setPRedefIndex(pRedefIndex);
        this.list_RedefParentInternalsSetterC = new ArrayList<>();
    
        this.RedefParentInternalsSetterCValue = new InternalValue(this.list_RedefParentInternalsSetterC, this.RedefParentInternalsSetterCContext);
    }
    
    
    private void setPRedefIndex( String pRedefIndex ){
        if(pRedefIndex == null){
            throw ObjectMacroException.parameterNull("RedefIndex");
        }
    
        this.field_RedefIndex = pRedefIndex;
    }
    
    public void addRedefParentInternalsSetterC(MRedefParentInternalsSetterC macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("RedefParentInternalsSetterC");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("RedefParentInternalsSetterC");
                }
    
        this.list_RedefParentInternalsSetterC.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    
    private String buildRedefIndex(){
    
        return this.field_RedefIndex;
    }
    
    private String buildRedefParentInternalsSetterC(){
        StringBuilder sb = new StringBuilder();
        Context local_context = RedefParentInternalsSetterCContext;
        List<Macro> macros = this.list_RedefParentInternalsSetterC;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.RedefParentInternalsSetterCNone != null){
            sb.append(this.RedefParentInternalsSetterCNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.RedefParentInternalsSetterCBeforeFirst != null){
                expansion = this.RedefParentInternalsSetterCBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.RedefParentInternalsSetterCAfterLast != null){
                expansion = this.RedefParentInternalsSetterCAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.RedefParentInternalsSetterCSeparator != null){
                expansion = this.RedefParentInternalsSetterCSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    
    private String getRedefIndex(){
    
        return this.field_RedefIndex;
    }
    
    private InternalValue getRedefParentInternalsSetterC(){
        return this.RedefParentInternalsSetterCValue;
    }
    
    private void initRedefParentInternalsSetterCInternals(Context context){
        for(Macro macro : this.list_RedefParentInternalsSetterC){
            macro.apply(new InternalsInitializer("RedefParentInternalsSetterC"){
                @Override
                void setRedefParentInternalsSetterC(MRedefParentInternalsSetterC mRedefParentInternalsSetterC){
                
                    
                    mRedefParentInternalsSetterC.setRedefIndex(RedefParentInternalsSetterCContext, getRedefIndex());
                }
            });
        }
    }
    
    
    private void initRedefParentInternalsSetterCDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.RedefParentInternalsSetterCSeparator = new DSeparator(sb0.toString());
        this.RedefParentInternalsSetterCValue.setSeparator(this.RedefParentInternalsSetterCSeparator);
    }
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setRedefInternalsInitializerC(this);
     }
    
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("RedefInternalsInitializerC");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initRedefParentInternalsSetterCDirectives();
        
        initRedefParentInternalsSetterCInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        MHeader minsert_1 = new MHeader();
        
        
        sb0.append(minsert_1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdlib.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdio.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<string.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"InternalsInitializer_redef");
        sb0.append(buildRedefIndex());
        sb0.append(".h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("struct InternalsInitializer_redef");
        sb0.append(buildRedefIndex());
        sb0.append("_VT VT_InternalsInitializer = ");
        sb0.append("{");
        sb0.append("0, &HT_InternalsInitializer};");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void* HT_InternalsInitializer[] = ");
        sb0.append("{");
        sb0.append("&VT_InternalsInitializer};");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("InternalsInitializer_redef");
        sb0.append(buildRedefIndex());
        sb0.append("* new_InternalsInitializer(char* paramName)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    InternalsInitializer_redef");
        sb0.append(buildRedefIndex());
        sb0.append("* internalInitializer = malloc(sizeof(InternalsInitializer_redef");
        sb0.append(buildRedefIndex());
        sb0.append("));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    internalInitializer->vt = &VT_InternalsInitializer;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    internalInitializer->paramName = paramName;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return internalInitializer;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void free_InternalsInitializer(InternalsInitializer_redef");
        sb0.append(buildRedefIndex());
        sb0.append("* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    //TODO");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildRedefParentInternalsSetterC());
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}