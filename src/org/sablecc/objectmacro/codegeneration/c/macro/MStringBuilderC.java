/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MStringBuilderC extends Macro{
    
    
    
    
    
    public MStringBuilderC(){
    
    
    }
    
    
    
    
    
    
    
    
    
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setStringBuilderC(this);
     }
    
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("StringBuilderC");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
        
    
        StringBuilder sb0 = new StringBuilder();
    
        MHeader minsert_6 = new MHeader();
        
        
        sb0.append(minsert_6.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdlib.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdio.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<string.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"Stringbuilder.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("struct Stringbuilder_VT VT_Stringbuilder=");
        sb0.append("{");
        sb0.append("0, &HT_Stringbuilder, &Stringbuilder_append, &Stringbuilder_toString};");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void* HT_Stringbuilder[] = ");
        sb0.append("{");
        sb0.append("&VT_Stringbuilder};");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("Stringbuilder* new_Stringbuilder(size_t init_cap)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    Stringbuilder* ret = malloc(sizeof(struct Stringbuilder));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ret->vt = &VT_Stringbuilder;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if (!ret) return NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ret->mem = calloc(init_cap, sizeof(char));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if (!ret->mem) return NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ret->cap = init_cap;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ret->count = 0;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return ret;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void free_Stringbuilder(Stringbuilder* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    free(this->mem);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    free(this);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this = NULL;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("define LOAD_FACTOR 2");
        sb0.append(LINE_SEPARATOR);
        sb0.append("bool Stringbuilder_append(Stringbuilder *this, char* string)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    bool size_ok = true;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    int len = strlen(string);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    for(int i = 0; i < len; i++)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        size_ok = Stringbuilder_appendChar(this, string[i]);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return size_ok;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("bool Stringbuilder_appendChar(Stringbuilder *this, char c) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this->mem[this->count] = c;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ++this->count;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if (this->count == this->cap) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        char *new_mem = realloc(this->mem, this->cap * LOAD_FACTOR);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if (!new_mem) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            return false;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        memset(new_mem + this->cap, 0, this->cap);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        this->mem = new_mem;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        this->cap *= LOAD_FACTOR;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return true;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("char* Stringbuilder_toString(Stringbuilder *this) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return this->mem;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}