/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MMacroC extends Macro{
    
    private String field_MacroName;
    
    private final List<Macro> list_Includes;
    
    private DSeparator IncludesSeparator;
    
    private DBeforeFirst IncludesBeforeFirst;
    
    private DAfterLast IncludesAfterLast;
    
    private DNone IncludesNone;
    
    private final InternalValue IncludesValue;
    
    private final List<Macro> list_Constructor;
    
    private DSeparator ConstructorSeparator;
    
    private DBeforeFirst ConstructorBeforeFirst;
    
    private DAfterLast ConstructorAfterLast;
    
    private DNone ConstructorNone;
    
    private final InternalValue ConstructorValue;
    
    private final List<Macro> list_FunctionNames;
    
    private DSeparator FunctionNamesSeparator;
    
    private DBeforeFirst FunctionNamesBeforeFirst;
    
    private DAfterLast FunctionNamesAfterLast;
    
    private DNone FunctionNamesNone;
    
    private final InternalValue FunctionNamesValue;
    
    private final List<Macro> list_Functions;
    
    private DSeparator FunctionsSeparator;
    
    private DBeforeFirst FunctionsBeforeFirst;
    
    private DAfterLast FunctionsAfterLast;
    
    private DNone FunctionsNone;
    
    private final InternalValue FunctionsValue;
    
    private final List<Macro> list_StrSplitFunction;
    
    private DSeparator StrSplitFunctionSeparator;
    
    private DBeforeFirst StrSplitFunctionBeforeFirst;
    
    private DAfterLast StrSplitFunctionAfterLast;
    
    private DNone StrSplitFunctionNone;
    
    private final InternalValue StrSplitFunctionValue;
    
    private final List<Macro> list_InternalFunctions;
    
    private DSeparator InternalFunctionsSeparator;
    
    private DBeforeFirst InternalFunctionsBeforeFirst;
    
    private DAfterLast InternalFunctionsAfterLast;
    
    private DNone InternalFunctionsNone;
    
    private final InternalValue InternalFunctionsValue;
    
    private final List<Macro> list_InitDirectives;
    
    private DSeparator InitDirectivesSeparator;
    
    private DBeforeFirst InitDirectivesBeforeFirst;
    
    private DAfterLast InitDirectivesAfterLast;
    
    private DNone InitDirectivesNone;
    
    private final InternalValue InitDirectivesValue;
    
    private final List<Macro> list_MacroBuilder;
    
    private DSeparator MacroBuilderSeparator;
    
    private DBeforeFirst MacroBuilderBeforeFirst;
    
    private DAfterLast MacroBuilderAfterLast;
    
    private DNone MacroBuilderNone;
    
    private final InternalValue MacroBuilderValue;
    
    private final List<Macro> list_EmptyBuilderWithContext;
    
    private DSeparator EmptyBuilderWithContextSeparator;
    
    private DBeforeFirst EmptyBuilderWithContextBeforeFirst;
    
    private DAfterLast EmptyBuilderWithContextAfterLast;
    
    private DNone EmptyBuilderWithContextNone;
    
    private final InternalValue EmptyBuilderWithContextValue;
    
    
    private final Context IncludesContext = new Context();
    
    private final Context ConstructorContext = new Context();
    
    private final Context FunctionNamesContext = new Context();
    
    private final Context FunctionsContext = new Context();
    
    private final Context StrSplitFunctionContext = new Context();
    
    private final Context InternalFunctionsContext = new Context();
    
    private final Context InitDirectivesContext = new Context();
    
    private final Context MacroBuilderContext = new Context();
    
    private final Context EmptyBuilderWithContextContext = new Context();
    
    
    public MMacroC(String pMacroName){
    
            this.setPMacroName(pMacroName);
        this.list_Includes = new ArrayList<>();
        this.list_Constructor = new ArrayList<>();
        this.list_FunctionNames = new ArrayList<>();
        this.list_Functions = new ArrayList<>();
        this.list_StrSplitFunction = new ArrayList<>();
        this.list_InternalFunctions = new ArrayList<>();
        this.list_InitDirectives = new ArrayList<>();
        this.list_MacroBuilder = new ArrayList<>();
        this.list_EmptyBuilderWithContext = new ArrayList<>();
    
        this.IncludesValue = new InternalValue(this.list_Includes, this.IncludesContext);
        this.ConstructorValue = new InternalValue(this.list_Constructor, this.ConstructorContext);
        this.FunctionNamesValue = new InternalValue(this.list_FunctionNames, this.FunctionNamesContext);
        this.FunctionsValue = new InternalValue(this.list_Functions, this.FunctionsContext);
        this.StrSplitFunctionValue = new InternalValue(this.list_StrSplitFunction, this.StrSplitFunctionContext);
        this.InternalFunctionsValue = new InternalValue(this.list_InternalFunctions, this.InternalFunctionsContext);
        this.InitDirectivesValue = new InternalValue(this.list_InitDirectives, this.InitDirectivesContext);
        this.MacroBuilderValue = new InternalValue(this.list_MacroBuilder, this.MacroBuilderContext);
        this.EmptyBuilderWithContextValue = new InternalValue(this.list_EmptyBuilderWithContext, this.EmptyBuilderWithContextContext);
    }
    
    
    private void setPMacroName( String pMacroName ){
        if(pMacroName == null){
            throw ObjectMacroException.parameterNull("MacroName");
        }
    
        this.field_MacroName = pMacroName;
    }
    
    public void addIncludes(MInclude macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Includes");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("Include");
                }
    
        this.list_Includes.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addConstructor(MConstructorC macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Constructor");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("ConstructorC");
                }
    
        this.list_Constructor.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFunctionNames(MFunctionRefs macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("FunctionNames");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("FunctionRefs");
                }
    
        this.list_FunctionNames.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFunctions(MAddStringC macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Functions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("AddStringC");
                }
    
        this.list_Functions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFunctions(MAddMacroC macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Functions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("AddMacroC");
                }
    
        this.list_Functions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFunctions(MInternalStringSetter macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Functions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("InternalStringSetter");
                }
    
        this.list_Functions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFunctions(MParamMacroRefC macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Functions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("ParamMacroRefC");
                }
    
        this.list_Functions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFunctions(MInternalMacroSetter macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Functions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("InternalMacroSetter");
                }
    
        this.list_Functions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFunctions(MInternalMacroRefC macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Functions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("InternalMacroRefC");
                }
    
        this.list_Functions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addStrSplitFunction(MStrSplitFunctionC macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("StrSplitFunction");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("StrSplitFunctionC");
                }
    
        this.list_StrSplitFunction.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addInternalFunctions(MParamStringRefBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InternalFunctions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("ParamStringRefBuilder");
                }
    
        this.list_InternalFunctions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addInternalFunctions(MParamMacroRefBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InternalFunctions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("ParamMacroRefBuilder");
                }
    
        this.list_InternalFunctions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addInternalFunctions(MInternalStringRefBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InternalFunctions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("InternalStringRefBuilder");
                }
    
        this.list_InternalFunctions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addInternalFunctions(MParamStringGetter macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InternalFunctions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("ParamStringGetter");
                }
    
        this.list_InternalFunctions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addInternalFunctions(MInternalStringGetter macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InternalFunctions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("InternalStringGetter");
                }
    
        this.list_InternalFunctions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addInternalFunctions(MInternalMacroRefBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InternalFunctions");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("InternalMacroRefBuilder");
                }
    
        this.list_InternalFunctions.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addInitDirectives(MInitDirectivesC macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InitDirectives");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("InitDirectivesC");
                }
    
        this.list_InitDirectives.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBuilder(MMacroBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBuilder");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("MacroBuilder");
                }
    
        this.list_MacroBuilder.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addEmptyBuilderWithContext(MEmptyBuilderWithContext macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("EmptyBuilderWithContext");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("EmptyBuilderWithContext");
                }
    
        this.list_EmptyBuilderWithContext.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    
    private String buildMacroName(){
    
        return this.field_MacroName;
    }
    
    private String buildIncludes(){
        StringBuilder sb = new StringBuilder();
        Context local_context = IncludesContext;
        List<Macro> macros = this.list_Includes;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.IncludesNone != null){
            sb.append(this.IncludesNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.IncludesBeforeFirst != null){
                expansion = this.IncludesBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.IncludesAfterLast != null){
                expansion = this.IncludesAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.IncludesSeparator != null){
                expansion = this.IncludesSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildConstructor(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ConstructorContext;
        List<Macro> macros = this.list_Constructor;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.ConstructorNone != null){
            sb.append(this.ConstructorNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.ConstructorBeforeFirst != null){
                expansion = this.ConstructorBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.ConstructorAfterLast != null){
                expansion = this.ConstructorAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.ConstructorSeparator != null){
                expansion = this.ConstructorSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildFunctionNames(){
        StringBuilder sb = new StringBuilder();
        Context local_context = FunctionNamesContext;
        List<Macro> macros = this.list_FunctionNames;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.FunctionNamesNone != null){
            sb.append(this.FunctionNamesNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.FunctionNamesBeforeFirst != null){
                expansion = this.FunctionNamesBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.FunctionNamesAfterLast != null){
                expansion = this.FunctionNamesAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.FunctionNamesSeparator != null){
                expansion = this.FunctionNamesSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildFunctions(){
        StringBuilder sb = new StringBuilder();
        Context local_context = FunctionsContext;
        List<Macro> macros = this.list_Functions;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.FunctionsNone != null){
            sb.append(this.FunctionsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.FunctionsBeforeFirst != null){
                expansion = this.FunctionsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.FunctionsAfterLast != null){
                expansion = this.FunctionsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.FunctionsSeparator != null){
                expansion = this.FunctionsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildStrSplitFunction(){
        StringBuilder sb = new StringBuilder();
        Context local_context = StrSplitFunctionContext;
        List<Macro> macros = this.list_StrSplitFunction;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.StrSplitFunctionNone != null){
            sb.append(this.StrSplitFunctionNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.StrSplitFunctionBeforeFirst != null){
                expansion = this.StrSplitFunctionBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.StrSplitFunctionAfterLast != null){
                expansion = this.StrSplitFunctionAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.StrSplitFunctionSeparator != null){
                expansion = this.StrSplitFunctionSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildInternalFunctions(){
        StringBuilder sb = new StringBuilder();
        Context local_context = InternalFunctionsContext;
        List<Macro> macros = this.list_InternalFunctions;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.InternalFunctionsNone != null){
            sb.append(this.InternalFunctionsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.InternalFunctionsBeforeFirst != null){
                expansion = this.InternalFunctionsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.InternalFunctionsAfterLast != null){
                expansion = this.InternalFunctionsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.InternalFunctionsSeparator != null){
                expansion = this.InternalFunctionsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildInitDirectives(){
        StringBuilder sb = new StringBuilder();
        Context local_context = InitDirectivesContext;
        List<Macro> macros = this.list_InitDirectives;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.InitDirectivesNone != null){
            sb.append(this.InitDirectivesNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.InitDirectivesBeforeFirst != null){
                expansion = this.InitDirectivesBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.InitDirectivesAfterLast != null){
                expansion = this.InitDirectivesAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.InitDirectivesSeparator != null){
                expansion = this.InitDirectivesSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildMacroBuilder(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroBuilderContext;
        List<Macro> macros = this.list_MacroBuilder;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroBuilderNone != null){
            sb.append(this.MacroBuilderNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroBuilderBeforeFirst != null){
                expansion = this.MacroBuilderBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBuilderAfterLast != null){
                expansion = this.MacroBuilderAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBuilderSeparator != null){
                expansion = this.MacroBuilderSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildEmptyBuilderWithContext(){
        StringBuilder sb = new StringBuilder();
        Context local_context = EmptyBuilderWithContextContext;
        List<Macro> macros = this.list_EmptyBuilderWithContext;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.EmptyBuilderWithContextNone != null){
            sb.append(this.EmptyBuilderWithContextNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.EmptyBuilderWithContextBeforeFirst != null){
                expansion = this.EmptyBuilderWithContextBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.EmptyBuilderWithContextAfterLast != null){
                expansion = this.EmptyBuilderWithContextAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.EmptyBuilderWithContextSeparator != null){
                expansion = this.EmptyBuilderWithContextSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    
    private String getMacroName(){
    
        return this.field_MacroName;
    }
    
    private InternalValue getIncludes(){
        return this.IncludesValue;
    }
    
    private InternalValue getConstructor(){
        return this.ConstructorValue;
    }
    
    private InternalValue getFunctionNames(){
        return this.FunctionNamesValue;
    }
    
    private InternalValue getFunctions(){
        return this.FunctionsValue;
    }
    
    private InternalValue getStrSplitFunction(){
        return this.StrSplitFunctionValue;
    }
    
    private InternalValue getInternalFunctions(){
        return this.InternalFunctionsValue;
    }
    
    private InternalValue getInitDirectives(){
        return this.InitDirectivesValue;
    }
    
    private InternalValue getMacroBuilder(){
        return this.MacroBuilderValue;
    }
    
    private InternalValue getEmptyBuilderWithContext(){
        return this.EmptyBuilderWithContextValue;
    }
    
    private void initIncludesInternals(Context context){
        for(Macro macro : this.list_Includes){
            macro.apply(new InternalsInitializer("Includes"){
                @Override
                void setInclude(MInclude mInclude){
                
                    
                    
                }
            });
        }
    }
    
    private void initConstructorInternals(Context context){
        for(Macro macro : this.list_Constructor){
            macro.apply(new InternalsInitializer("Constructor"){
                @Override
                void setConstructorC(MConstructorC mConstructorC){
                
                    
                    mConstructorC.setMacroName(ConstructorContext, getMacroName());
                }
            });
        }
    }
    
    private void initFunctionNamesInternals(Context context){
        for(Macro macro : this.list_FunctionNames){
            macro.apply(new InternalsInitializer("FunctionNames"){
                @Override
                void setFunctionRefs(MFunctionRefs mFunctionRefs){
                
                    
                    mFunctionRefs.setMacroName(FunctionNamesContext, getMacroName());
                }
            });
        }
    }
    
    private void initFunctionsInternals(Context context){
        for(Macro macro : this.list_Functions){
            macro.apply(new InternalsInitializer("Functions"){
                @Override
                void setAddStringC(MAddStringC mAddStringC){
                
                    
                    mAddStringC.setClassName(FunctionsContext, getMacroName());
                }@Override
                void setAddMacroC(MAddMacroC mAddMacroC){
                
                    
                    mAddMacroC.setClassName(FunctionsContext, getMacroName());
                }@Override
                void setInternalStringSetter(MInternalStringSetter mInternalStringSetter){
                
                    
                    mInternalStringSetter.setMacroName(FunctionsContext, getMacroName());
                }@Override
                void setParamMacroRefC(MParamMacroRefC mParamMacroRefC){
                
                    
                    mParamMacroRefC.setMacroName(FunctionsContext, getMacroName());
                }@Override
                void setInternalMacroSetter(MInternalMacroSetter mInternalMacroSetter){
                
                    
                    mInternalMacroSetter.setMacroName(FunctionsContext, getMacroName());
                }@Override
                void setInternalMacroRefC(MInternalMacroRefC mInternalMacroRefC){
                
                    
                    mInternalMacroRefC.setMacroName(FunctionsContext, getMacroName());
                }
            });
        }
    }
    
    private void initStrSplitFunctionInternals(Context context){
        for(Macro macro : this.list_StrSplitFunction){
            macro.apply(new InternalsInitializer("StrSplitFunction"){
                @Override
                void setStrSplitFunctionC(MStrSplitFunctionC mStrSplitFunctionC){
                
                    
                    mStrSplitFunctionC.setMacroName(StrSplitFunctionContext, getMacroName());
                }
            });
        }
    }
    
    private void initInternalFunctionsInternals(Context context){
        for(Macro macro : this.list_InternalFunctions){
            macro.apply(new InternalsInitializer("InternalFunctions"){
                @Override
                void setParamStringRefBuilder(MParamStringRefBuilder mParamStringRefBuilder){
                
                    
                    mParamStringRefBuilder.setMacroName(InternalFunctionsContext, getMacroName());
                }@Override
                void setParamMacroRefBuilder(MParamMacroRefBuilder mParamMacroRefBuilder){
                
                    
                    mParamMacroRefBuilder.setMacroName(InternalFunctionsContext, getMacroName());
                }@Override
                void setInternalStringRefBuilder(MInternalStringRefBuilder mInternalStringRefBuilder){
                
                    
                    mInternalStringRefBuilder.setMacroName(InternalFunctionsContext, getMacroName());
                }@Override
                void setParamStringGetter(MParamStringGetter mParamStringGetter){
                
                    
                    mParamStringGetter.setMacroName(InternalFunctionsContext, getMacroName());
                }@Override
                void setInternalStringGetter(MInternalStringGetter mInternalStringGetter){
                
                    
                    mInternalStringGetter.setMacroName(InternalFunctionsContext, getMacroName());
                }@Override
                void setInternalMacroRefBuilder(MInternalMacroRefBuilder mInternalMacroRefBuilder){
                
                    
                    mInternalMacroRefBuilder.setMacroName(InternalFunctionsContext, getMacroName());
                }
            });
        }
    }
    
    private void initInitDirectivesInternals(Context context){
        for(Macro macro : this.list_InitDirectives){
            macro.apply(new InternalsInitializer("InitDirectives"){
                @Override
                void setInitDirectivesC(MInitDirectivesC mInitDirectivesC){
                
                    
                    mInitDirectivesC.setMacroName(InitDirectivesContext, getMacroName());
                }
            });
        }
    }
    
    private void initMacroBuilderInternals(Context context){
        for(Macro macro : this.list_MacroBuilder){
            macro.apply(new InternalsInitializer("MacroBuilder"){
                @Override
                void setMacroBuilder(MMacroBuilder mMacroBuilder){
                
                    
                    mMacroBuilder.setMacroName(MacroBuilderContext, getMacroName());
                }
            });
        }
    }
    
    private void initEmptyBuilderWithContextInternals(Context context){
        for(Macro macro : this.list_EmptyBuilderWithContext){
            macro.apply(new InternalsInitializer("EmptyBuilderWithContext"){
                @Override
                void setEmptyBuilderWithContext(MEmptyBuilderWithContext mEmptyBuilderWithContext){
                
                    
                    mEmptyBuilderWithContext.setMacroName(EmptyBuilderWithContextContext, getMacroName());
                }
            });
        }
    }
    
    
    private void initIncludesDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.IncludesSeparator = new DSeparator(sb0.toString());
        this.IncludesValue.setSeparator(this.IncludesSeparator);
    }
    
    private void initConstructorDirectives(){
        
    }
    
    private void initFunctionNamesDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(" ,");
        this.FunctionNamesBeforeFirst = new DBeforeFirst(sb0.toString());
        this.FunctionNamesValue.setBeforeFirst(this.FunctionNamesBeforeFirst);StringBuilder sb1 = new StringBuilder();
        sb1.append(" ,");
        this.FunctionNamesSeparator = new DSeparator(sb1.toString());
        this.FunctionNamesValue.setSeparator(this.FunctionNamesSeparator);
    }
    
    private void initFunctionsDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.FunctionsBeforeFirst = new DBeforeFirst(sb0.toString());
        this.FunctionsValue.setBeforeFirst(this.FunctionsBeforeFirst);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.FunctionsSeparator = new DSeparator(sb1.toString());
        this.FunctionsValue.setSeparator(this.FunctionsSeparator);
    }
    
    private void initStrSplitFunctionDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.StrSplitFunctionSeparator = new DSeparator(sb0.toString());
        this.StrSplitFunctionValue.setSeparator(this.StrSplitFunctionSeparator);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.StrSplitFunctionBeforeFirst = new DBeforeFirst(sb1.toString());
        this.StrSplitFunctionValue.setBeforeFirst(this.StrSplitFunctionBeforeFirst);
    }
    
    private void initInternalFunctionsDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.InternalFunctionsBeforeFirst = new DBeforeFirst(sb0.toString());
        this.InternalFunctionsValue.setBeforeFirst(this.InternalFunctionsBeforeFirst);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.InternalFunctionsSeparator = new DSeparator(sb1.toString());
        this.InternalFunctionsValue.setSeparator(this.InternalFunctionsSeparator);
    }
    
    private void initInitDirectivesDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.InitDirectivesSeparator = new DSeparator(sb0.toString());
        this.InitDirectivesValue.setSeparator(this.InitDirectivesSeparator);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.InitDirectivesBeforeFirst = new DBeforeFirst(sb1.toString());
        this.InitDirectivesValue.setBeforeFirst(this.InitDirectivesBeforeFirst);
    }
    
    private void initMacroBuilderDirectives(){
        
    }
    
    private void initEmptyBuilderWithContextDirectives(){
        
    }
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setMacroC(this);
     }
    
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("MacroC");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initIncludesDirectives();
        initConstructorDirectives();
        initFunctionNamesDirectives();
        initFunctionsDirectives();
        initStrSplitFunctionDirectives();
        initInternalFunctionsDirectives();
        initInitDirectivesDirectives();
        initMacroBuilderDirectives();
        initEmptyBuilderWithContextDirectives();
        
        initIncludesInternals(null);
        initConstructorInternals(null);
        initFunctionNamesInternals(null);
        initFunctionsInternals(null);
        initStrSplitFunctionInternals(null);
        initInternalFunctionsInternals(null);
        initInitDirectivesInternals(null);
        initMacroBuilderInternals(null);
        initEmptyBuilderWithContextInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        MHeader minsert_1 = new MHeader();
        
        
        sb0.append(minsert_1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdlib.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<stdio.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<string.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include<assert.h>");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"Stringbuilder.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"LinkedList.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"Map.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"Context.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"InternalsInitializer.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"InternalValue.h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildIncludes());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("#");
        sb0.append("include \"M");
        sb0.append(buildMacroName());
        sb0.append(".h\"");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("struct M");
        sb0.append(buildMacroName());
        sb0.append("_VT VT_M");
        sb0.append(buildMacroName());
        sb0.append(" = ");
        sb0.append("{");
        sb0.append("0, &HT_M");
        sb0.append(buildMacroName());
        sb0.append(", &M");
        sb0.append(buildMacroName());
        sb0.append("_build, &M");
        sb0.append(buildMacroName());
        sb0.append("_apply, &M");
        sb0.append(buildMacroName());
        sb0.append("_getChildren");
        sb0.append(buildFunctionNames());
        sb0.append("};");
        sb0.append(LINE_SEPARATOR);
        sb0.append("void* HT_M");
        sb0.append(buildMacroName());
        sb0.append("[] = ");
        sb0.append("{");
        sb0.append("&VT_M");
        sb0.append(buildMacroName());
        sb0.append("};");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildConstructor());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void free_M");
        sb0.append(buildMacroName());
        sb0.append("(M");
        sb0.append(buildMacroName());
        sb0.append("* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    free(this);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("void M");
        sb0.append(buildMacroName());
        sb0.append("_apply(M");
        sb0.append(buildMacroName());
        sb0.append("* this, InternalsInitializer* visitor)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    exit(1);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("LinkedList* M");
        sb0.append(buildMacroName());
        sb0.append("_getChildren(M");
        sb0.append(buildMacroName());
        sb0.append("* this)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return this->children;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("char* M");
        sb0.append(buildMacroName());
        sb0.append("_applyIndent(char* macro, char* indent)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    Stringbuilder *sb = new_Stringbuilder(5);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    char** lines = M");
        sb0.append(buildMacroName());
        sb0.append("_strSplit(macro, '\\n');");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    int i;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    for (i=0; *(lines + i); i++)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(i > 0)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            sb->vt->append(sb, LINE_SEPARATOR);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        sb->vt->append(sb, indent);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        sb->vt->append(sb, *(lines + i));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        free(*(lines + i));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return sb->vt->toString(sb);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildFunctions());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildInitDirectives());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildStrSplitFunction());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildInternalFunctions());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildMacroBuilder());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildEmptyBuilderWithContext());
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}