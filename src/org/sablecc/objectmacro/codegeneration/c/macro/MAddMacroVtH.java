/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.*;

public class MAddMacroVtH extends Macro{
    

    private String field_FieldName;

    

    private final List<Macro> list_ParamArgs;

    

    private DSeparator ParamArgsSeparator;

    

    private DBeforeFirst ParamArgsBeforeFirst;

    

    private DAfterLast ParamArgsAfterLast;

    

    private DNone ParamArgsNone;

    

    private final InternalValue ParamArgsValue;

    

    private Map<Context, String> field_ClassName = new LinkedHashMap<>();

    

    

    private final Context ParamArgsContext = new Context();

    

    

    public MAddMacroVtH(String pFieldName){

    

            this.setPFieldName(pFieldName);

        this.list_ParamArgs = new ArrayList<>();

    

        this.ParamArgsValue = new InternalValue(this.list_ParamArgs, this.ParamArgsContext);

    }

    

    

    private void setPFieldName( String pFieldName ){

        if(pFieldName == null){

            throw ObjectMacroException.parameterNull("FieldName");

        }

    

        this.field_FieldName = pFieldName;

    }

    

    public void addParamArgs(MParamMacroArgH macro){

        if(macro == null){

            throw ObjectMacroException.parameterNull("ParamArgs");

        }

        

    

        this.list_ParamArgs.add(macro);

        this.children.add(macro);

        Macro.cycleDetector.detectCycle(this, macro);

    }

    

        void setClassName(

                Context context,

                String value) {

    

            if(value == null){

                throw new RuntimeException("value cannot be null here");

            }

    

            this.field_ClassName.put(context, value);

        }

    

    

    private String buildFieldName(){

    

        return this.field_FieldName;

    }

    

    private String buildParamArgs(){

        StringBuilder sb = new StringBuilder();

        Context local_context = ParamArgsContext;

        List<Macro> macros = this.list_ParamArgs;

    

        int i = 0;

        int nb_macros = macros.size();

        String expansion = null;

    

        if(this.ParamArgsNone != null){

            sb.append(this.ParamArgsNone.apply(i, "", nb_macros));

        }

    

        for(Macro macro : macros){

            expansion = macro.build(local_context);

    

            if(this.ParamArgsBeforeFirst != null){

                expansion = this.ParamArgsBeforeFirst.apply(i, expansion, nb_macros);

            }

    

            if(this.ParamArgsAfterLast != null){

                expansion = this.ParamArgsAfterLast.apply(i, expansion, nb_macros);

            }

    

            if(this.ParamArgsSeparator != null){

                expansion = this.ParamArgsSeparator.apply(i, expansion, nb_macros);

            }

    

            sb.append(expansion);

            i++;

        }

    

        return sb.toString();

    }

    

    private String buildClassName(Context context){

    

        return this.field_ClassName.get(context);

    }

    

    

    private String getFieldName(){

    

        return this.field_FieldName;

    }

    

    private InternalValue getParamArgs(){

        return this.ParamArgsValue;

    }

    

    private String getClassName(Context context){

    

        return this.field_ClassName.get(context);

    }

    

    private void initParamArgsInternals(Context context){

        for(Macro macro : this.list_ParamArgs){

            macro.apply(new InternalsInitializer("ParamArgs"){


                @Override



                void setParamMacroArgH(MParamMacroArgH mParamMacroArgH){



                



                    



                    



                }


            });

        }

    }

    

    

    private void initParamArgsDirectives(){

//        StringBuilder sb0 = new StringBuilder();
//
//
//        sb1.append(", ");
//
//
//        this.ParamArgsBeforeFirst = new DBeforeFirst(sb0.toString());
//
//
//        this.ParamArgsValue.setBeforeFirst(this.ParamArgsBeforeFirst);StringBuilder sb2 = new StringBuilder();
//
//
//        sb3.append(", ");
//
//
//        this.ParamArgsSeparator = new DSeparator(sb2.toString());
//
//
//        this.ParamArgsValue.setSeparator(this.ParamArgsSeparator);

    }

    

    @Override

     void apply(

             InternalsInitializer internalsInitializer){

    

         internalsInitializer.setAddMacroVtH(this);

     }

    

    

    @Override

    public String build(Context context){

    

        BuildState buildState = this.build_states.get(context);

    

        if(buildState == null){

            buildState = new BuildState();

        }

        else if(buildState.getExpansion() == null){

            throw ObjectMacroException.cyclicReference("AddMacroVtH");

        }

        else{

            return buildState.getExpansion();

        }

        this.build_states.put(context, buildState);

        List<String> indentations = new LinkedList<>();

        StringBuilder sbIndentation = new StringBuilder();

    

        initParamArgsDirectives();


        


        initParamArgsInternals(context);

    

        StringBuilder sb0 = new StringBuilder();

    

        sb0.append("void (*add");


        sb0.append(buildFieldName());


        sb0.append(")(struct M");


        sb0.append(buildClassName(context));


        sb0.append("*");


        sb0.append(buildParamArgs());


        sb0.append(");");

    

        buildState.setExpansion(sb0.toString());

        return sb0.toString();

    }

    

    

    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}